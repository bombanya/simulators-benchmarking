
coremark_427.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f4  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  080056a4  080056a4  000066a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc8  08005cc8  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cd0  08005cd0  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd0  08005cd0  00006cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cd4  08005cd4  00006cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005cd8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007084  2**0
                  CONTENTS
 10 .bss          00000850  20000084  20000084  00007084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008d4  200008d4  00007084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a34c  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002215  00000000  00000000  00011400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  00013618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b6  00000000  00000000  00013f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023049  00000000  00000000  000145c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1a9  00000000  00000000  0003760f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfe5c  00000000  00000000  000447b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114614  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002434  00000000  00000000  00114658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00116a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800568c 	.word	0x0800568c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	0800568c 	.word	0x0800568c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <calc_func>:
	, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end);
typedef ee_s32(*list_cmp)(list_data *a, list_data *b, core_results *res);
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res);

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
	ee_s16 data=*pdata;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	827b      	strh	r3, [r7, #18]
	ee_s16 retval;
	ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
 8000e2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e30:	11db      	asrs	r3, r3, #7
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	747b      	strb	r3, [r7, #17]
	if (optype) /* if cached, use cache */
 8000e3c:	7c7b      	ldrb	r3, [r7, #17]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d004      	beq.n	8000e4c <calc_func+0x30>
		return (data & 0x007f);
 8000e42:	8a7b      	ldrh	r3, [r7, #18]
 8000e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	e072      	b.n	8000f32 <calc_func+0x116>
	else { /* otherwise calculate and cache the result */
		ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
 8000e4c:	8a7b      	ldrh	r3, [r7, #18]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	81fb      	strh	r3, [r7, #14]
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
 8000e54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e58:	10db      	asrs	r3, r3, #3
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	f003 030f 	and.w	r3, r3, #15
 8000e60:	82bb      	strh	r3, [r7, #20]
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 8000e62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	8abb      	ldrh	r3, [r7, #20]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	82bb      	strh	r3, [r7, #20]
		switch (flag) {
 8000e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <calc_func+0x62>
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d023      	beq.n	8000ec4 <calc_func+0xa8>
 8000e7c:	e036      	b.n	8000eec <calc_func+0xd0>
			case 0:
				if (dtype<0x22) /* set min period for bit corruption */
 8000e7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e82:	2b21      	cmp	r3, #33	@ 0x21
 8000e84:	dc01      	bgt.n	8000e8a <calc_func+0x6e>
					dtype=0x22;
 8000e86:	2322      	movs	r3, #34	@ 0x22
 8000e88:	82bb      	strh	r3, [r7, #20]
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	6998      	ldr	r0, [r3, #24]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	6959      	ldr	r1, [r3, #20]
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4623      	mov	r3, r4
 8000eac:	f001 fd24 	bl	80028f8 <core_bench_state>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	82fb      	strh	r3, [r7, #22]
				if (res->crcstate==0)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d11a      	bne.n	8000ef2 <calc_func+0xd6>
					res->crcstate=retval;
 8000ebc:	8afa      	ldrh	r2, [r7, #22]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e
				break;
 8000ec2:	e016      	b.n	8000ef2 <calc_func+0xd6>
			case 1:
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8000ece:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f001 f8e8 	bl	80020a8 <core_bench_matrix>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	82fb      	strh	r3, [r7, #22]
				if (res->crcmatrix==0)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <calc_func+0xda>
					res->crcmatrix=retval;
 8000ee4:	8afa      	ldrh	r2, [r7, #22]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	879a      	strh	r2, [r3, #60]	@ 0x3c
				break;
 8000eea:	e004      	b.n	8000ef6 <calc_func+0xda>
			default:
				retval=data;
 8000eec:	8a7b      	ldrh	r3, [r7, #18]
 8000eee:	82fb      	strh	r3, [r7, #22]
				break;
 8000ef0:	e002      	b.n	8000ef8 <calc_func+0xdc>
				break;
 8000ef2:	bf00      	nop
 8000ef4:	e000      	b.n	8000ef8 <calc_func+0xdc>
				break;
 8000ef6:	bf00      	nop
		}
		res->crc=crcu16(retval,res->crc);
 8000ef8:	8afa      	ldrh	r2, [r7, #22]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000efe:	4619      	mov	r1, r3
 8000f00:	4610      	mov	r0, r2
 8000f02:	f002 f819 	bl	8002f38 <crcu16>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	871a      	strh	r2, [r3, #56]	@ 0x38
		retval &= 0x007f; 
 8000f0e:	8afb      	ldrh	r3, [r7, #22]
 8000f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f14:	82fb      	strh	r3, [r7, #22]
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 8000f16:	8a7b      	ldrh	r3, [r7, #18]
 8000f18:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	8afb      	ldrh	r3, [r7, #22]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	801a      	strh	r2, [r3, #0]
		return retval;
 8000f2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
	}
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	371c      	adds	r7, #28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd90      	pop	{r4, r7, pc}

08000f3a <cmp_complex>:
/* Function: cmp_complex
	Compare the data item in a list cell.

	Can be used by mergesort.
*/
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	ee_s16 val1=calc_func(&(a->data16),res);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff66 	bl	8000e1c <calc_func>
 8000f50:	4603      	mov	r3, r0
 8000f52:	82fb      	strh	r3, [r7, #22]
	ee_s16 val2=calc_func(&(b->data16),res);
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5f 	bl	8000e1c <calc_func>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	82bb      	strh	r3, [r7, #20]
	return val1 - val2;
 8000f62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f6a:	1ad3      	subs	r3, r2, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <cmp_idx>:
/* Function: cmp_idx
	Compare the idx item in a list cell, and regen the data.

	Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	if (res==NULL) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d121      	bne.n	8000fca <cmp_idx+0x56>
		a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	801a      	strh	r2, [r3, #0]
		b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	801a      	strh	r2, [r3, #0]
	}
	return a->idx - b->idx;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fd8:	1ad3      	subs	r3, r2, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <copy_info>:

void copy_info(list_data *to,list_data *from) {
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
	to->data16=from->data16;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	801a      	strh	r2, [r3, #0]
	to->idx=from->idx;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	805a      	strh	r2, [r3, #2]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <core_bench_list>:
	- List sort
	- Operate on data from list (crc)
	- Single remove/reinsert
	* At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
	ee_u16 retval=0;
 800101c:	2300      	movs	r3, #0
 800101e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	ee_u16 found=0,missed=0;
 8001020:	2300      	movs	r3, #0
 8001022:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001024:	2300      	movs	r3, #0
 8001026:	847b      	strh	r3, [r7, #34]	@ 0x22
	list_head *list=res->list;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102c:	61fb      	str	r3, [r7, #28]
	ee_s16 find_num=res->seed3;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	889b      	ldrh	r3, [r3, #4]
 8001032:	82bb      	strh	r3, [r7, #20]
	list_head *this_find;
	list_head *finder, *remover;
	list_data info;
	ee_s16 i;

	info.idx=finder_idx;
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	817b      	strh	r3, [r7, #10]
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
 8001038:	2300      	movs	r3, #0
 800103a:	82fb      	strh	r3, [r7, #22]
 800103c:	e05f      	b.n	80010fe <core_bench_list+0xee>
		info.data16= (i & 0xff) ;
 800103e:	8afb      	ldrh	r3, [r7, #22]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	b21b      	sxth	r3, r3
 8001044:	813b      	strh	r3, [r7, #8]
		this_find=core_list_find(list,&info);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4619      	mov	r1, r3
 800104c:	69f8      	ldr	r0, [r7, #28]
 800104e:	f000 f9f3 	bl	8001438 <core_list_find>
 8001052:	60f8      	str	r0, [r7, #12]
		list=core_list_reverse(list);
 8001054:	69f8      	ldr	r0, [r7, #28]
 8001056:	f000 fa23 	bl	80014a0 <core_list_reverse>
 800105a:	61f8      	str	r0, [r7, #28]
		if (this_find==NULL) {
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d111      	bne.n	8001086 <core_bench_list+0x76>
			missed++;
 8001062:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001064:	3301      	adds	r3, #1
 8001066:	847b      	strh	r3, [r7, #34]	@ 0x22
			retval+=(list->next->info->data16 >> 8) & 1;
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001072:	121b      	asrs	r3, r3, #8
 8001074:	b21b      	sxth	r3, r3
 8001076:	b29b      	uxth	r3, r3
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001080:	4413      	add	r3, r2
 8001082:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001084:	e02a      	b.n	80010dc <core_bench_list+0xcc>
		}
		else {
			found++;
 8001086:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001088:	3301      	adds	r3, #1
 800108a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (this_find->info->data16 & 0x1) /* use found value */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	b29b      	uxth	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00c      	beq.n	80010b8 <core_bench_list+0xa8>
				retval+=(this_find->info->data16 >> 9) & 1;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a6:	125b      	asrs	r3, r3, #9
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010b4:	4413      	add	r3, r2
 80010b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
			/* and cache next item at the head of the list (if any) */
			if (this_find->next != NULL) {
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00d      	beq.n	80010dc <core_bench_list+0xcc>
				finder = this_find->next;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
				this_find->next = finder->next;
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	601a      	str	r2, [r3, #0]
				finder->next=list->next;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	601a      	str	r2, [r3, #0]
				list->next=finder;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]
			}
		}
		if (info.idx>=0)
 80010dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db06      	blt.n	80010f2 <core_bench_list+0xe2>
			info.idx++;
 80010e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	3301      	adds	r3, #1
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	817b      	strh	r3, [r7, #10]
	for (i=0; i<find_num; i++) {
 80010f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	82fb      	strh	r3, [r7, #22]
 80010fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001102:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001106:	429a      	cmp	r2, r3
 8001108:	db99      	blt.n	800103e <core_bench_list+0x2e>
#if CORE_DEBUG
	ee_printf("List find %d: [%d,%d,%d]\n",i,retval,missed,found);
#endif
	}
	retval+=found*4-missed;
 800110a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	b29a      	uxth	r2, r3
 8001110:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	b29a      	uxth	r2, r3
 8001116:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001118:	4413      	add	r3, r2
 800111a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/* sort the list by data content and remove one item*/
	if (finder_idx>0)
 800111c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dd05      	ble.n	8001130 <core_bench_list+0x120>
		list=core_list_mergesort(list,cmp_complex,res);
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4928      	ldr	r1, [pc, #160]	@ (80011c8 <core_bench_list+0x1b8>)
 8001128:	69f8      	ldr	r0, [r7, #28]
 800112a:	f000 f9d4 	bl	80014d6 <core_list_mergesort>
 800112e:	61f8      	str	r0, [r7, #28]
	remover=core_list_remove(list->next);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f942 	bl	80013be <core_list_remove>
 800113a:	6138      	str	r0, [r7, #16]
	/* CRC data content of list from location of index N forward, and then undo remove */
	finder=core_list_find(list,&info);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4619      	mov	r1, r3
 8001142:	69f8      	ldr	r0, [r7, #28]
 8001144:	f000 f978 	bl	8001438 <core_list_find>
 8001148:	61b8      	str	r0, [r7, #24]
	if (!finder)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d111      	bne.n	8001174 <core_bench_list+0x164>
		finder=list->next;
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
	while (finder) {
 8001156:	e00d      	b.n	8001174 <core_bench_list+0x164>
		retval=crc16(list->info->data16,retval);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f001 ff26 	bl	8002fb6 <crc16>
 800116a:	4603      	mov	r3, r0
 800116c:	84fb      	strh	r3, [r7, #38]	@ 0x26
		finder=finder->next;
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	61bb      	str	r3, [r7, #24]
	while (finder) {
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ee      	bne.n	8001158 <core_bench_list+0x148>
	}
#if CORE_DEBUG
	ee_printf("List sort 1: %04x\n",retval);
#endif
	remover=core_list_undo_remove(remover,list->next);
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	6938      	ldr	r0, [r7, #16]
 8001182:	f000 f93c 	bl	80013fe <core_list_undo_remove>
 8001186:	6138      	str	r0, [r7, #16]
	/* sort the list by index, in effect returning the list to original state */
	list=core_list_mergesort(list,cmp_idx,NULL);
 8001188:	2200      	movs	r2, #0
 800118a:	4910      	ldr	r1, [pc, #64]	@ (80011cc <core_bench_list+0x1bc>)
 800118c:	69f8      	ldr	r0, [r7, #28]
 800118e:	f000 f9a2 	bl	80014d6 <core_list_mergesort>
 8001192:	61f8      	str	r0, [r7, #28]
	/* CRC data content of list */
	finder=list->next;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
	while (finder) {
 800119a:	e00d      	b.n	80011b8 <core_bench_list+0x1a8>
		retval=crc16(list->info->data16,retval);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 ff04 	bl	8002fb6 <crc16>
 80011ae:	4603      	mov	r3, r0
 80011b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		finder=finder->next;
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	61bb      	str	r3, [r7, #24]
	while (finder) {
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ee      	bne.n	800119c <core_bench_list+0x18c>
	}
#if CORE_DEBUG
	ee_printf("List sort 2: %04x\n",retval);
#endif
	return retval;
 80011be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3728      	adds	r7, #40	@ 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	08000f3b 	.word	0x08000f3b
 80011cc:	08000f75 	.word	0x08000f75

080011d0 <core_list_init>:

	Returns:
	Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b092      	sub	sp, #72	@ 0x48
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	4613      	mov	r3, r2
 80011dc:	80fb      	strh	r3, [r7, #6]
	/* calculated pointers for the list */
	ee_u32 per_item=16+sizeof(struct list_data_s);
 80011de:	2314      	movs	r3, #20
 80011e0:	637b      	str	r3, [r7, #52]	@ 0x34
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	3b02      	subs	r3, #2
 80011ec:	633b      	str	r3, [r7, #48]	@ 0x30
	list_head *memblock_end=memblock+size;
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	list_data *datablock=(list_data *)(memblock_end);
 80011f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011fa:	61bb      	str	r3, [r7, #24]
	list_data *datablock_end=datablock+size;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* some useful variables */
	ee_u32 i;
	list_head *finder,*list=memblock;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
	list_data info;

	/* create a fake items for the list head and tail */
	list->next=NULL;
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
	list->info=datablock;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	605a      	str	r2, [r3, #4]
	list->info->idx=0x0000;
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	805a      	strh	r2, [r3, #2]
	list->info->data16=(ee_s16)0x8080;
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001226:	801a      	strh	r2, [r3, #0]
	memblock++;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3308      	adds	r3, #8
 800122c:	60bb      	str	r3, [r7, #8]
	datablock++;
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	3304      	adds	r3, #4
 8001232:	61bb      	str	r3, [r7, #24]
	info.idx=0x7fff;
 8001234:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001238:	82fb      	strh	r3, [r7, #22]
	info.data16=(ee_s16)0xffff;
 800123a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800123e:	82bb      	strh	r3, [r7, #20]
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
 8001240:	f107 0018 	add.w	r0, r7, #24
 8001244:	f107 0208 	add.w	r2, r7, #8
 8001248:	f107 0114 	add.w	r1, r7, #20
 800124c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	4603      	mov	r3, r0
 8001256:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001258:	f000 f876 	bl	8001348 <core_list_insert_new>
	
	/* then insert size items */
	for (i=0; i<size; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001260:	e02a      	b.n	80012b8 <core_list_init+0xe8>
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
 8001262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001264:	b29a      	uxth	r2, r3
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	4053      	eors	r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	843b      	strh	r3, [r7, #32]
		ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
 8001272:	8c3b      	ldrh	r3, [r7, #32]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	b29a      	uxth	r2, r3
 8001278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800127a:	b29b      	uxth	r3, r3
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	b29b      	uxth	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	83fb      	strh	r3, [r7, #30]
		info.data16=(dat<<8) | dat;		/* fill the data with actual data and upper bits with rebuild value */
 8001286:	8bfb      	ldrh	r3, [r7, #30]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	82bb      	strh	r3, [r7, #20]
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
 8001296:	f107 0018 	add.w	r0, r7, #24
 800129a:	f107 0208 	add.w	r2, r7, #8
 800129e:	f107 0114 	add.w	r1, r7, #20
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4603      	mov	r3, r0
 80012ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012ae:	f000 f84b 	bl	8001348 <core_list_insert_new>
	for (i=0; i<size; i++) {
 80012b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012b4:	3301      	adds	r3, #1
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3d0      	bcc.n	8001262 <core_list_init+0x92>
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	i=1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (finder->next!=NULL) {
 80012ca:	e02a      	b.n	8001322 <core_list_init+0x152>
		if (i<size/5) /* first 20% of the list in order */
 80012cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <core_list_init+0x170>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <core_list_init+0x11c>
			finder->info->idx=i++;
 80012dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80012e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012e4:	6852      	ldr	r2, [r2, #4]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	8053      	strh	r3, [r2, #2]
 80012ea:	e017      	b.n	800131c <core_list_init+0x14c>
		else { 
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
 80012ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	4053      	eors	r3, r2
 80012f8:	847b      	strh	r3, [r7, #34]	@ 0x22
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
 80012fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b29b      	uxth	r3, r3
 8001302:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001306:	b29a      	uxth	r2, r3
 8001308:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800130a:	4313      	orrs	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b21a      	sxth	r2, r3
 8001310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001318:	b212      	sxth	r2, r2
 800131a:	805a      	strh	r2, [r3, #2]
		}
		finder=finder->next;
 800131c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (finder->next!=NULL) {
 8001322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1d0      	bne.n	80012cc <core_list_init+0xfc>
	}
	list = core_list_mergesort(list,cmp_idx,NULL);
 800132a:	2200      	movs	r2, #0
 800132c:	4905      	ldr	r1, [pc, #20]	@ (8001344 <core_list_init+0x174>)
 800132e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001330:	f000 f8d1 	bl	80014d6 <core_list_mergesort>
 8001334:	6278      	str	r0, [r7, #36]	@ 0x24
		ee_printf("[%04x,%04x]",finder->info->idx,(ee_u16)finder->info->data16);
		finder=finder->next;
	}
	ee_printf("\n");
#endif
	return list;
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001338:	4618      	mov	r0, r3
 800133a:	3740      	adds	r7, #64	@ 0x40
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	cccccccd 	.word	0xcccccccd
 8001344:	08000f75 	.word	0x08000f75

08001348 <core_list_insert_new>:

	Returns:
	Pointer to new item.
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3308      	adds	r3, #8
 800135c:	6a3a      	ldr	r2, [r7, #32]
 800135e:	429a      	cmp	r2, r3
 8001360:	d801      	bhi.n	8001366 <core_list_insert_new+0x1e>
		return NULL;
 8001362:	2300      	movs	r3, #0
 8001364:	e027      	b.n	80013b6 <core_list_insert_new+0x6e>
	if ((*datablock+1) >= datablock_end)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3304      	adds	r3, #4
 800136c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800136e:	429a      	cmp	r2, r3
 8001370:	d801      	bhi.n	8001376 <core_list_insert_new+0x2e>
		return NULL;
 8001372:	2300      	movs	r3, #0
 8001374:	e01f      	b.n	80013b6 <core_list_insert_new+0x6e>
		
	newitem=*memblock;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	617b      	str	r3, [r7, #20]
	(*memblock)++;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f103 0208 	add.w	r2, r3, #8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	601a      	str	r2, [r3, #0]
	newitem->next=insert_point->next;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	601a      	str	r2, [r3, #0]
	insert_point->next=newitem;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	601a      	str	r2, [r3, #0]
	
	newitem->info=*datablock;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	605a      	str	r2, [r3, #4]
	(*datablock)++;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1d1a      	adds	r2, r3, #4
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	601a      	str	r2, [r3, #0]
	copy_info(newitem->info,info);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe19 	bl	8000fe6 <copy_info>
	
	return newitem;
 80013b4:	697b      	ldr	r3, [r7, #20]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <core_list_remove>:
	since there is always a fake item at the end of the list, no need to check for NULL.

	Returns:
	Removed item.
*/
list_head *core_list_remove(list_head *item) {
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
	list_data *tmp;
	list_head *ret=item->next;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]
	/* swap data pointers */
	tmp=item->info;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	60bb      	str	r3, [r7, #8]
	item->info=ret->info;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
	ret->info=tmp;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	605a      	str	r2, [r3, #4]
	/* and eliminate item */
	item->next=item->next->next;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]
	ret->next=NULL;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	return ret;
 80013f0:	68fb      	ldr	r3, [r7, #12]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <core_list_undo_remove>:

	Returns:
	The item that was linked back to the list.
	
*/
list_head *core_list_undo_remove(list_head *item_removed, list_head *item_modified) {
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
	list_data *tmp;
	/* swap data pointers */
	tmp=item_removed->info;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	60fb      	str	r3, [r7, #12]
	item_removed->info=item_modified->info;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	605a      	str	r2, [r3, #4]
	item_modified->info=tmp;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	605a      	str	r2, [r3, #4]
	/* and insert item */
	item_removed->next=item_modified->next;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
	item_modified->next=item_removed;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	601a      	str	r2, [r3, #0]
	return item_removed;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <core_list_find>:
	info - idx or data to find

	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	if (info->idx>=0) {
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db14      	blt.n	8001476 <core_list_find+0x3e>
		while (list && (list->info->idx != info->idx))
 800144c:	e002      	b.n	8001454 <core_list_find+0x1c>
			list=list->next;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	607b      	str	r3, [r7, #4]
		while (list && (list->info->idx != info->idx))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <core_list_find+0x34>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001468:	429a      	cmp	r2, r3
 800146a:	d1f0      	bne.n	800144e <core_list_find+0x16>
		return list;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	e011      	b.n	8001494 <core_list_find+0x5c>
	} else {
		while (list && ((list->info->data16 & 0xff) != info->data16))
			list=list->next;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	607b      	str	r3, [r7, #4]
		while (list && ((list->info->data16 & 0xff) != info->data16))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00a      	beq.n	8001492 <core_list_find+0x5a>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	b29b      	uxth	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800148e:	4293      	cmp	r3, r2
 8001490:	d1ee      	bne.n	8001470 <core_list_find+0x38>
		return list;
 8001492:	687b      	ldr	r3, [r7, #4]
	}
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <core_list_reverse>:

	Returns:
	Found item, or NULL if not found.
*/

list_head *core_list_reverse(list_head *list) {
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	list_head *next=NULL, *tmp;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
	while (list) {
 80014ac:	e009      	b.n	80014c2 <core_list_reverse+0x22>
		tmp=list->next;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	60bb      	str	r3, [r7, #8]
		list->next=next;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	601a      	str	r2, [r3, #0]
		next=list;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]
		list=tmp;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	607b      	str	r3, [r7, #4]
	while (list) {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f2      	bne.n	80014ae <core_list_reverse+0xe>
	}
	return next;
 80014c8:	68fb      	ldr	r3, [r7, #12]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <core_list_mergesort>:
	Note: 
	We have a special header for the list that will always be first,
	but the algorithm could theoretically modify where the list starts.

 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b08e      	sub	sp, #56	@ 0x38
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24

    while (1) {
        p = list;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	637b      	str	r3, [r7, #52]	@ 0x34
        list = NULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
        tail = NULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28

        nmerges = 0;  /* count number of merges we do in this pass */
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]

        while (p) {
 80014f6:	e06a      	b.n	80015ce <core_list_mergesort+0xf8>
            nmerges++;  /* there exists a merge to be done */
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	3301      	adds	r3, #1
 80014fc:	623b      	str	r3, [r7, #32]
            /* step `insize' places along from p */
            q = p;
 80014fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
            psize = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < insize; i++) {
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e00b      	b.n	8001524 <core_list_mergesort+0x4e>
                psize++;
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	3301      	adds	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
			    q = q->next;
 8001512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
                if (!q) break;
 8001518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800151a:	2b00      	cmp	r3, #0
 800151c:	d007      	beq.n	800152e <core_list_mergesort+0x58>
            for (i = 0; i < insize; i++) {
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	429a      	cmp	r2, r3
 800152a:	dbef      	blt.n	800150c <core_list_mergesort+0x36>
 800152c:	e000      	b.n	8001530 <core_list_mergesort+0x5a>
                if (!q) break;
 800152e:	bf00      	nop
            }

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	61bb      	str	r3, [r7, #24]

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
 8001534:	e040      	b.n	80015b8 <core_list_mergesort+0xe2>

				/* decide whether next element of merge comes from p or q */
				if (psize == 0) {
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d108      	bne.n	800154e <core_list_mergesort+0x78>
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
 800153c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	633b      	str	r3, [r7, #48]	@ 0x30
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	3b01      	subs	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	e029      	b.n	80015a2 <core_list_mergesort+0xcc>
				} else if (qsize == 0 || !q) {
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <core_list_mergesort+0x84>
 8001554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001556:	2b00      	cmp	r3, #0
 8001558:	d108      	bne.n	800156c <core_list_mergesort+0x96>
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
 800155a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	637b      	str	r3, [r7, #52]	@ 0x34
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	3b01      	subs	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e01a      	b.n	80015a2 <core_list_mergesort+0xcc>
				} else if (cmp(p->info,q->info,res) <= 0) {
 800156c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156e:	6858      	ldr	r0, [r3, #4]
 8001570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	4798      	blx	r3
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	dc08      	bgt.n	8001592 <core_list_mergesort+0xbc>
				    /* First element of p is lower (or same); e must come from p. */
				    e = p; p = p->next; psize--;
 8001580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b01      	subs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	e007      	b.n	80015a2 <core_list_mergesort+0xcc>
				} else {
				    /* First element of q is lower; e must come from q. */
				    e = q; q = q->next; qsize--;
 8001592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	3b01      	subs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
				}

		        /* add the next element to the merged list */
				if (tail) {
 80015a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <core_list_mergesort+0xda>
				    tail->next = e;
 80015a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e001      	b.n	80015b4 <core_list_mergesort+0xde>
				} else {
				    list = e;
 80015b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b2:	60fb      	str	r3, [r7, #12]
				}
				tail = e;
 80015b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (psize > 0 || (qsize > 0 && q)) {
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dcbb      	bgt.n	8001536 <core_list_mergesort+0x60>
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dd02      	ble.n	80015ca <core_list_mergesort+0xf4>
 80015c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1b5      	bne.n	8001536 <core_list_mergesort+0x60>
	        }

			/* now p has stepped `insize' places along, and q has too */
			p = q;
 80015ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015cc:	637b      	str	r3, [r7, #52]	@ 0x34
        while (p) {
 80015ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d191      	bne.n	80014f8 <core_list_mergesort+0x22>
        }
		
	    tail->next = NULL;
 80015d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	dc01      	bgt.n	80015e4 <core_list_mergesort+0x10e>
            return list;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	e003      	b.n	80015ec <core_list_mergesort+0x116>

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
        p = list;
 80015ea:	e77c      	b.n	80014e6 <core_list_mergesort+0x10>
    }
#if COMPILER_REQUIRES_SORT_RETURN
	return list;
#endif
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3738      	adds	r7, #56	@ 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <iterate>:
                                    (ee_u16)0xe5a4,
                                    (ee_u16)0x8e3a,
                                    (ee_u16)0x8d84 };

void *iterate(void *pres)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    ee_u32        i;
    ee_u16        crc;
    core_results *res        = (core_results *)pres;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	613b      	str	r3, [r7, #16]
    ee_u32        iterations = res->iterations;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	60fb      	str	r3, [r7, #12]
    res->crc                 = 0;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2200      	movs	r2, #0
 800160a:	871a      	strh	r2, [r3, #56]	@ 0x38
    res->crclist             = 0;
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	2200      	movs	r2, #0
 8001610:	875a      	strh	r2, [r3, #58]	@ 0x3a
    res->crcmatrix           = 0;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2200      	movs	r2, #0
 8001616:	879a      	strh	r2, [r3, #60]	@ 0x3c
    res->crcstate            = 0;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2200      	movs	r2, #0
 800161c:	87da      	strh	r2, [r3, #62]	@ 0x3e

    for (i = 0; i < iterations; i++)
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e02c      	b.n	800167e <iterate+0x8a>
    {
        crc      = core_bench_list(res, 1);
 8001624:	2101      	movs	r1, #1
 8001626:	6938      	ldr	r0, [r7, #16]
 8001628:	f7ff fcf2 	bl	8001010 <core_bench_list>
 800162c:	4603      	mov	r3, r0
 800162e:	817b      	strh	r3, [r7, #10]
        res->crc = crcu16(crc, res->crc);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8001634:	897b      	ldrh	r3, [r7, #10]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fc7d 	bl	8002f38 <crcu16>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	871a      	strh	r2, [r3, #56]	@ 0x38
        crc      = core_bench_list(res, -1);
 8001646:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800164a:	6938      	ldr	r0, [r7, #16]
 800164c:	f7ff fce0 	bl	8001010 <core_bench_list>
 8001650:	4603      	mov	r3, r0
 8001652:	817b      	strh	r3, [r7, #10]
        res->crc = crcu16(crc, res->crc);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8001658:	897b      	ldrh	r3, [r7, #10]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fc6b 	bl	8002f38 <crcu16>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	871a      	strh	r2, [r3, #56]	@ 0x38
        if (i == 0)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d103      	bne.n	8001678 <iterate+0x84>
            res->crclist = res->crc;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	875a      	strh	r2, [r3, #58]	@ 0x3a
    for (i = 0; i < iterations; i++)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	429a      	cmp	r2, r3
 8001684:	d3ce      	bcc.n	8001624 <iterate+0x30>
    }
    return NULL;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <main2>:

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE main2(void)
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b09e      	sub	sp, #120	@ 0x78
 8001694:	af02      	add	r7, sp, #8
    int   argc = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	64bb      	str	r3, [r7, #72]	@ 0x48
    char *argv[1];
#else
MAIN_RETURN_TYPE main(int argc, char *argv[])
{
#endif
    ee_u16       i, j = 0, num_algorithms = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    ee_s16       known_id = -1, total_errors = 0;
 80016a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016aa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    ee_u16       seedcrc = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    core_results results[MULTITHREAD];
#if (MEM_METHOD == MEM_STACK)
    ee_u8 stack_memblock[TOTAL_DATA_SIZE * MULTITHREAD];
#endif
    /* first call any initializations needed */
    portable_init(&(results[0].port), &argc, argv);
 80016ba:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80016be:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80016c2:	463b      	mov	r3, r7
 80016c4:	3342      	adds	r3, #66	@ 0x42
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 f8da 	bl	8002880 <portable_init>
    if (sizeof(struct list_head_s) > 128)
    {
        ee_printf("list_head structure too big for comparable data!\n\r");
        return MAIN_RETURN_VAL;
    }
    results[0].seed1      = get_seed(1);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f001 fbab 	bl	8002e28 <get_seed_32>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	803b      	strh	r3, [r7, #0]
    results[0].seed2      = get_seed(2);
 80016d8:	2002      	movs	r0, #2
 80016da:	f001 fba5 	bl	8002e28 <get_seed_32>
 80016de:	4603      	mov	r3, r0
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	807b      	strh	r3, [r7, #2]
    results[0].seed3      = get_seed(3);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f001 fb9f 	bl	8002e28 <get_seed_32>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	80bb      	strh	r3, [r7, #4]
    results[0].iterations = get_seed_32(4);
 80016f0:	2004      	movs	r0, #4
 80016f2:	f001 fb99 	bl	8002e28 <get_seed_32>
 80016f6:	4603      	mov	r3, r0
 80016f8:	61fb      	str	r3, [r7, #28]
#if CORE_DEBUG
    results[0].iterations = 1;
#endif
    results[0].execs = get_seed_32(5);
 80016fa:	2005      	movs	r0, #5
 80016fc:	f001 fb94 	bl	8002e28 <get_seed_32>
 8001700:	4603      	mov	r3, r0
 8001702:	623b      	str	r3, [r7, #32]
    if (results[0].execs == 0)
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <main2+0x7e>
    { /* if not supplied, execute all algorithms */
        results[0].execs = ALL_ALGORITHMS_MASK;
 800170a:	2307      	movs	r3, #7
 800170c:	623b      	str	r3, [r7, #32]
    }
    /* put in some default values based on one seed only for easy testing */
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
 800170e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10d      	bne.n	8001732 <main2+0xa2>
 8001716:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <main2+0xa2>
        && (results[0].seed3 == 0))
 800171e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d105      	bne.n	8001732 <main2+0xa2>
    { /* perfromance run */
        results[0].seed1 = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	803b      	strh	r3, [r7, #0]
        results[0].seed2 = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	807b      	strh	r3, [r7, #2]
        results[0].seed3 = 0x66;
 800172e:	2366      	movs	r3, #102	@ 0x66
 8001730:	80bb      	strh	r3, [r7, #4]
    }
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
 8001732:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d10f      	bne.n	800175a <main2+0xca>
 800173a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10b      	bne.n	800175a <main2+0xca>
        && (results[0].seed3 == 0))
 8001742:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d107      	bne.n	800175a <main2+0xca>
    { /* validation run */
        results[0].seed1 = 0x3415;
 800174a:	f243 4315 	movw	r3, #13333	@ 0x3415
 800174e:	803b      	strh	r3, [r7, #0]
        results[0].seed2 = 0x3415;
 8001750:	f243 4315 	movw	r3, #13333	@ 0x3415
 8001754:	807b      	strh	r3, [r7, #2]
        results[0].seed3 = 0x66;
 8001756:	2366      	movs	r3, #102	@ 0x66
 8001758:	80bb      	strh	r3, [r7, #4]
    }
#if (MEM_METHOD == MEM_STATIC)
    results[0].memblock[0] = (void *)static_memblk;
 800175a:	4b9f      	ldr	r3, [pc, #636]	@ (80019d8 <main2+0x348>)
 800175c:	60bb      	str	r3, [r7, #8]
    results[0].size        = TOTAL_DATA_SIZE;
 800175e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001762:	61bb      	str	r3, [r7, #24]
    results[0].err         = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
#else
#error "Please define a way to initialize a memory block."
#endif
    /* Data init */
    /* Find out how space much we have based on number of algorithms */
    for (i = 0; i < NUM_ALGORITHMS; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001770:	e013      	b.n	800179a <main2+0x10a>
    {
        if ((1 << (ee_u32)i) & results[0].execs)
 8001772:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001776:	2201      	movs	r2, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	461a      	mov	r2, r3
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d004      	beq.n	8001790 <main2+0x100>
            num_algorithms++;
 8001786:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800178a:	3301      	adds	r3, #1
 800178c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    for (i = 0; i < NUM_ALGORITHMS; i++)
 8001790:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001794:	3301      	adds	r3, #1
 8001796:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800179a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d9e7      	bls.n	8001772 <main2+0xe2>
    }
    for (i = 0; i < MULTITHREAD; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80017a8:	e01c      	b.n	80017e4 <main2+0x154>
        results[i].size = results[i].size / num_algorithms;
 80017aa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	3370      	adds	r3, #112	@ 0x70
 80017b8:	443b      	add	r3, r7
 80017ba:	3b58      	subs	r3, #88	@ 0x58
 80017bc:	6819      	ldr	r1, [r3, #0]
 80017be:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80017c2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80017c6:	fbb1 f1f3 	udiv	r1, r1, r3
 80017ca:	4613      	mov	r3, r2
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	3370      	adds	r3, #112	@ 0x70
 80017d4:	443b      	add	r3, r7
 80017d6:	3b58      	subs	r3, #88	@ 0x58
 80017d8:	6019      	str	r1, [r3, #0]
    for (i = 0; i < MULTITHREAD; i++)
 80017da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80017de:	3301      	adds	r3, #1
 80017e0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80017e4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0de      	beq.n	80017aa <main2+0x11a>
    /* Assign pointers */
    for (i = 0; i < NUM_ALGORITHMS; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80017f2:	e039      	b.n	8001868 <main2+0x1d8>
    {
        ee_u32 ctx;
        if ((1 << (ee_u32)i) & results[0].execs)
 80017f4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80017f8:	2201      	movs	r2, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d02a      	beq.n	800185e <main2+0x1ce>
        {
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
 8001808:	2300      	movs	r3, #0
 800180a:	663b      	str	r3, [r7, #96]	@ 0x60
 800180c:	e01f      	b.n	800184e <main2+0x1be>
                results[ctx].memblock[i + 1]
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
 800180e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	3370      	adds	r3, #112	@ 0x70
 800181a:	443b      	add	r3, r7
 800181c:	3b68      	subs	r3, #104	@ 0x68
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f8b7 106c 	ldrh.w	r1, [r7, #108]	@ 0x6c
 8001826:	fb01 f303 	mul.w	r3, r1, r3
                results[ctx].memblock[i + 1]
 800182a:	f8b7 106e 	ldrh.w	r1, [r7, #110]	@ 0x6e
 800182e:	1c48      	adds	r0, r1, #1
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
 8001830:	18d1      	adds	r1, r2, r3
 8001832:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	4413      	add	r3, r2
 800183a:	4403      	add	r3, r0
 800183c:	3302      	adds	r3, #2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	3370      	adds	r3, #112	@ 0x70
 8001842:	443b      	add	r3, r7
 8001844:	f843 1c70 	str.w	r1, [r3, #-112]
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
 8001848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800184a:	3301      	adds	r3, #1
 800184c:	663b      	str	r3, [r7, #96]	@ 0x60
 800184e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0dc      	beq.n	800180e <main2+0x17e>
            j++;
 8001854:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001858:	3301      	adds	r3, #1
 800185a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    for (i = 0; i < NUM_ALGORITHMS; i++)
 800185e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001862:	3301      	adds	r3, #1
 8001864:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001868:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800186c:	2b02      	cmp	r3, #2
 800186e:	d9c1      	bls.n	80017f4 <main2+0x164>
        }
    }
    /* call inits */
    for (i = 0; i < MULTITHREAD; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001876:	e09d      	b.n	80019b4 <main2+0x324>
    {
        if (results[i].execs & ID_LIST)
 8001878:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800187c:	4613      	mov	r3, r2
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	3370      	adds	r3, #112	@ 0x70
 8001886:	443b      	add	r3, r7
 8001888:	3b50      	subs	r3, #80	@ 0x50
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d023      	beq.n	80018dc <main2+0x24c>
        {
            results[i].list = core_list_init(
 8001894:	69b8      	ldr	r0, [r7, #24]
 8001896:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
                results[0].size, results[i].memblock[1], results[i].seed1);
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	3370      	adds	r3, #112	@ 0x70
 80018a4:	443b      	add	r3, r7
 80018a6:	3b64      	subs	r3, #100	@ 0x64
 80018a8:	6819      	ldr	r1, [r3, #0]
            results[i].list = core_list_init(
 80018aa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	3370      	adds	r3, #112	@ 0x70
 80018b8:	443b      	add	r3, r7
 80018ba:	3b70      	subs	r3, #112	@ 0x70
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	f8b7 406e 	ldrh.w	r4, [r7, #110]	@ 0x6e
 80018c4:	461a      	mov	r2, r3
 80018c6:	f7ff fc83 	bl	80011d0 <core_list_init>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4623      	mov	r3, r4
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4423      	add	r3, r4
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	3370      	adds	r3, #112	@ 0x70
 80018d6:	443b      	add	r3, r7
 80018d8:	3b4c      	subs	r3, #76	@ 0x4c
 80018da:	601a      	str	r2, [r3, #0]
        }
        if (results[i].execs & ID_MATRIX)
 80018dc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80018e0:	4613      	mov	r3, r2
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	3370      	adds	r3, #112	@ 0x70
 80018ea:	443b      	add	r3, r7
 80018ec:	3b50      	subs	r3, #80	@ 0x50
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d031      	beq.n	800195c <main2+0x2cc>
        {
            core_init_matrix(results[0].size,
 80018f8:	69b8      	ldr	r0, [r7, #24]
 80018fa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80018fe:	4613      	mov	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	3370      	adds	r3, #112	@ 0x70
 8001908:	443b      	add	r3, r7
 800190a:	3b60      	subs	r3, #96	@ 0x60
 800190c:	681c      	ldr	r4, [r3, #0]
                             results[i].memblock[2],
                             (ee_s32)results[i].seed1
 800190e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	3370      	adds	r3, #112	@ 0x70
 800191c:	443b      	add	r3, r7
 800191e:	3b70      	subs	r3, #112	@ 0x70
 8001920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001924:	4619      	mov	r1, r3
                                 | (((ee_s32)results[i].seed2) << 16),
 8001926:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800192a:	4613      	mov	r3, r2
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	3370      	adds	r3, #112	@ 0x70
 8001934:	443b      	add	r3, r7
 8001936:	3b6e      	subs	r3, #110	@ 0x6e
 8001938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193c:	041b      	lsls	r3, r3, #16
            core_init_matrix(results[0].size,
 800193e:	ea41 0503 	orr.w	r5, r1, r3
                             &(results[i].mat));
 8001942:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
            core_init_matrix(results[0].size,
 8001946:	4639      	mov	r1, r7
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	3328      	adds	r3, #40	@ 0x28
 8001952:	440b      	add	r3, r1
 8001954:	462a      	mov	r2, r5
 8001956:	4621      	mov	r1, r4
 8001958:	f000 fc51 	bl	80021fe <core_init_matrix>
        }
        if (results[i].execs & ID_STATE)
 800195c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	3370      	adds	r3, #112	@ 0x70
 800196a:	443b      	add	r3, r7
 800196c:	3b50      	subs	r3, #80	@ 0x50
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d018      	beq.n	80019aa <main2+0x31a>
        {
            core_init_state(
 8001978:	69b8      	ldr	r0, [r7, #24]
 800197a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800197e:	4613      	mov	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	3370      	adds	r3, #112	@ 0x70
 8001988:	443b      	add	r3, r7
 800198a:	3b70      	subs	r3, #112	@ 0x70
 800198c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001990:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
                results[0].size, results[i].seed1, results[i].memblock[3]);
 8001994:	4613      	mov	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	3370      	adds	r3, #112	@ 0x70
 800199e:	443b      	add	r3, r7
 80019a0:	3b5c      	subs	r3, #92	@ 0x5c
 80019a2:	681b      	ldr	r3, [r3, #0]
            core_init_state(
 80019a4:	461a      	mov	r2, r3
 80019a6:	f001 f86d 	bl	8002a84 <core_init_state>
    for (i = 0; i < MULTITHREAD; i++)
 80019aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80019ae:	3301      	adds	r3, #1
 80019b0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80019b4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f43f af5d 	beq.w	8001878 <main2+0x1e8>
        }
    }

    /* automatically determine number of iterations if not set */
    if (results[0].iterations == 0)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d13f      	bne.n	8001a44 <main2+0x3b4>
    {
        secs_ret secs_passed = 0;
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        ee_u32   divisor;
        results[0].iterations = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
        while (secs_passed < (secs_ret)1)
 80019d4:	e018      	b.n	8001a08 <main2+0x378>
 80019d6:	bf00      	nop
 80019d8:	200000a0 	.word	0x200000a0
        {
            results[0].iterations *= 10;
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
            start_time();
 80019e8:	f000 fef2 	bl	80027d0 <start_time>
            iterate(&results[0]);
 80019ec:	463b      	mov	r3, r7
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fe00 	bl	80015f4 <iterate>
            stop_time();
 80019f4:	f000 fef8 	bl	80027e8 <stop_time>
            secs_passed = time_in_secs(get_time());
 80019f8:	f000 ff02 	bl	8002800 <get_time>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 ff12 	bl	8002828 <time_in_secs>
 8001a04:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
        while (secs_passed < (secs_ret)1)
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b53      	ldr	r3, [pc, #332]	@ (8001b5c <main2+0x4cc>)
 8001a0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001a12:	f7ff f81b 	bl	8000a4c <__aeabi_dcmplt>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1df      	bne.n	80019dc <main2+0x34c>
        }
        /* now we know it executes for at least 1 sec, set actual run time at
         * about 10 secs */
        divisor = (ee_u32)secs_passed;
 8001a1c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001a20:	f7ff f864 	bl	8000aec <__aeabi_d2uiz>
 8001a24:	4603      	mov	r3, r0
 8001a26:	657b      	str	r3, [r7, #84]	@ 0x54
        if (divisor == 0) /* some machines cast float to int as 0 since this
 8001a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <main2+0x3a2>
                             conversion is not defined by ANSI, but we know at
                             least one second passed */
            divisor = 1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	657b      	str	r3, [r7, #84]	@ 0x54
        results[0].iterations *= 1 + 10 / divisor;
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	210a      	movs	r1, #10
 8001a36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a38:	fbb1 f2f2 	udiv	r2, r1, r2
 8001a3c:	3201      	adds	r2, #1
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	61fb      	str	r3, [r7, #28]
    }
    /* perform actual benchmark */
    start_time();
 8001a44:	f000 fec4 	bl	80027d0 <start_time>
    for (i = 0; i < default_num_contexts; i++)
    {
        core_stop_parallel(&results[i]);
    }
#else
    iterate(&results[0]);
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fdd2 	bl	80015f4 <iterate>
#endif
    stop_time();
 8001a50:	f000 feca 	bl	80027e8 <stop_time>
    total_time = get_time();
 8001a54:	f000 fed4 	bl	8002800 <get_time>
 8001a58:	64f8      	str	r0, [r7, #76]	@ 0x4c
    /* get a function of the input to report */
    seedcrc = crc16(results[0].seed1, seedcrc);
 8001a5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a5e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 faa6 	bl	8002fb6 <crc16>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    seedcrc = crc16(results[0].seed2, seedcrc);
 8001a70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a74:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fa9b 	bl	8002fb6 <crc16>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    seedcrc = crc16(results[0].seed3, seedcrc);
 8001a86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a8a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fa90 	bl	8002fb6 <crc16>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    seedcrc = crc16(results[0].size, seedcrc);
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 fa85 	bl	8002fb6 <crc16>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52



    switch (seedcrc)
 8001ab2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001ab6:	f64e 12f5 	movw	r2, #59893	@ 0xe9f5
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d031      	beq.n	8001b22 <main2+0x492>
 8001abe:	f64e 12f5 	movw	r2, #59893	@ 0xe9f5
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	dc3b      	bgt.n	8001b3e <main2+0x4ae>
 8001ac6:	f648 2202 	movw	r2, #35330	@ 0x8a02
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d014      	beq.n	8001af8 <main2+0x468>
 8001ace:	f648 2202 	movw	r2, #35330	@ 0x8a02
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	dc33      	bgt.n	8001b3e <main2+0x4ae>
 8001ad6:	f647 3205 	movw	r2, #31493	@ 0x7b05
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <main2+0x476>
 8001ade:	f647 3205 	movw	r2, #31493	@ 0x7b05
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	dc2b      	bgt.n	8001b3e <main2+0x4ae>
 8001ae6:	f641 02f2 	movw	r2, #6386	@ 0x18f2
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d020      	beq.n	8001b30 <main2+0x4a0>
 8001aee:	f644 62af 	movw	r2, #20143	@ 0x4eaf
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00e      	beq.n	8001b14 <main2+0x484>
 8001af6:	e022      	b.n	8001b3e <main2+0x4ae>
    {                /* test known output for common seeds */
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
            ee_printf("6k performance run parameters for coremark.\n\r");
 8001afe:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <main2+0x4d0>)
 8001b00:	f002 fc48 	bl	8004394 <ee_printf>
            break;
 8001b04:	e020      	b.n	8001b48 <main2+0x4b8>
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per
                        algorithm */
            known_id = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
            ee_printf("6k validation run parameters for coremark.\n\r");
 8001b0c:	4815      	ldr	r0, [pc, #84]	@ (8001b64 <main2+0x4d4>)
 8001b0e:	f002 fc41 	bl	8004394 <ee_printf>
            break;
 8001b12:	e019      	b.n	8001b48 <main2+0x4b8>
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm
                      */
            known_id = 2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
            ee_printf("Profile generation run parameters for coremark.\n\r");
 8001b1a:	4813      	ldr	r0, [pc, #76]	@ (8001b68 <main2+0x4d8>)
 8001b1c:	f002 fc3a 	bl	8004394 <ee_printf>
            break;
 8001b20:	e012      	b.n	8001b48 <main2+0x4b8>
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id = 3;
 8001b22:	2303      	movs	r3, #3
 8001b24:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
            ee_printf("2K performance run parameters for coremark.\n\r");
 8001b28:	4810      	ldr	r0, [pc, #64]	@ (8001b6c <main2+0x4dc>)
 8001b2a:	f002 fc33 	bl	8004394 <ee_printf>
            break;
 8001b2e:	e00b      	b.n	8001b48 <main2+0x4b8>
        case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per
                        algorithm */
            known_id = 4;
 8001b30:	2304      	movs	r3, #4
 8001b32:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
            ee_printf("2K validation run parameters for coremark.\n\r");
 8001b36:	480e      	ldr	r0, [pc, #56]	@ (8001b70 <main2+0x4e0>)
 8001b38:	f002 fc2c 	bl	8004394 <ee_printf>
            break;
 8001b3c:	e004      	b.n	8001b48 <main2+0x4b8>
        default:
            total_errors = -1;
 8001b3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b42:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
            break;
 8001b46:	bf00      	nop
    }
    if (known_id >= 0)
 8001b48:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f2c0 8121 	blt.w	8001d94 <main2+0x704>
    {
        for (i = 0; i < default_num_contexts; i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001b58:	e115      	b.n	8001d86 <main2+0x6f6>
 8001b5a:	bf00      	nop
 8001b5c:	3ff00000 	.word	0x3ff00000
 8001b60:	080056bc 	.word	0x080056bc
 8001b64:	080056ec 	.word	0x080056ec
 8001b68:	0800571c 	.word	0x0800571c
 8001b6c:	08005750 	.word	0x08005750
 8001b70:	08005780 	.word	0x08005780
        {
            results[i].err = 0;
 8001b74:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	3370      	adds	r3, #112	@ 0x70
 8001b82:	443b      	add	r3, r7
 8001b84:	3b30      	subs	r3, #48	@ 0x30
 8001b86:	2200      	movs	r2, #0
 8001b88:	801a      	strh	r2, [r3, #0]
            if ((results[i].execs & ID_LIST)
 8001b8a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	3370      	adds	r3, #112	@ 0x70
 8001b98:	443b      	add	r3, r7
 8001b9a:	3b50      	subs	r3, #80	@ 0x50
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03e      	beq.n	8001c24 <main2+0x594>
                && (results[i].crclist != list_known_crc[known_id]))
 8001ba6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001baa:	4613      	mov	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3370      	adds	r3, #112	@ 0x70
 8001bb4:	443b      	add	r3, r7
 8001bb6:	3b36      	subs	r3, #54	@ 0x36
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001bbe:	49c5      	ldr	r1, [pc, #788]	@ (8001ed4 <main2+0x844>)
 8001bc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d02d      	beq.n	8001c24 <main2+0x594>
            {
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n\r",
 8001bc8:	f8b7 106e 	ldrh.w	r1, [r7, #110]	@ 0x6e
                          i,
                          results[i].crclist,
 8001bcc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	3370      	adds	r3, #112	@ 0x70
 8001bda:	443b      	add	r3, r7
 8001bdc:	3b36      	subs	r3, #54	@ 0x36
 8001bde:	881b      	ldrh	r3, [r3, #0]
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n\r",
 8001be0:	4618      	mov	r0, r3
                          list_known_crc[known_id]);
 8001be2:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001be6:	4abb      	ldr	r2, [pc, #748]	@ (8001ed4 <main2+0x844>)
 8001be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n\r",
 8001bec:	4602      	mov	r2, r0
 8001bee:	48ba      	ldr	r0, [pc, #744]	@ (8001ed8 <main2+0x848>)
 8001bf0:	f002 fbd0 	bl	8004394 <ee_printf>
                results[i].err++;
 8001bf4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3370      	adds	r3, #112	@ 0x70
 8001c02:	443b      	add	r3, r7
 8001c04:	3b30      	subs	r3, #48	@ 0x30
 8001c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	b219      	sxth	r1, r3
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	3370      	adds	r3, #112	@ 0x70
 8001c1c:	443b      	add	r3, r7
 8001c1e:	3b30      	subs	r3, #48	@ 0x30
 8001c20:	460a      	mov	r2, r1
 8001c22:	801a      	strh	r2, [r3, #0]
            }
            if ((results[i].execs & ID_MATRIX)
 8001c24:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001c28:	4613      	mov	r3, r2
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	3370      	adds	r3, #112	@ 0x70
 8001c32:	443b      	add	r3, r7
 8001c34:	3b50      	subs	r3, #80	@ 0x50
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d03e      	beq.n	8001cbe <main2+0x62e>
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
 8001c40:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	3370      	adds	r3, #112	@ 0x70
 8001c4e:	443b      	add	r3, r7
 8001c50:	3b34      	subs	r3, #52	@ 0x34
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001c58:	49a0      	ldr	r1, [pc, #640]	@ (8001edc <main2+0x84c>)
 8001c5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d02d      	beq.n	8001cbe <main2+0x62e>
            {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n\r",
 8001c62:	f8b7 106e 	ldrh.w	r1, [r7, #110]	@ 0x6e
                          i,
                          results[i].crcmatrix,
 8001c66:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	3370      	adds	r3, #112	@ 0x70
 8001c74:	443b      	add	r3, r7
 8001c76:	3b34      	subs	r3, #52	@ 0x34
 8001c78:	881b      	ldrh	r3, [r3, #0]
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n\r",
 8001c7a:	4618      	mov	r0, r3
                          matrix_known_crc[known_id]);
 8001c7c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001c80:	4a96      	ldr	r2, [pc, #600]	@ (8001edc <main2+0x84c>)
 8001c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n\r",
 8001c86:	4602      	mov	r2, r0
 8001c88:	4895      	ldr	r0, [pc, #596]	@ (8001ee0 <main2+0x850>)
 8001c8a:	f002 fb83 	bl	8004394 <ee_printf>
                results[i].err++;
 8001c8e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001c92:	4613      	mov	r3, r2
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	3370      	adds	r3, #112	@ 0x70
 8001c9c:	443b      	add	r3, r7
 8001c9e:	3b30      	subs	r3, #48	@ 0x30
 8001ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b219      	sxth	r1, r3
 8001cac:	4613      	mov	r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	3370      	adds	r3, #112	@ 0x70
 8001cb6:	443b      	add	r3, r7
 8001cb8:	3b30      	subs	r3, #48	@ 0x30
 8001cba:	460a      	mov	r2, r1
 8001cbc:	801a      	strh	r2, [r3, #0]
            }
            if ((results[i].execs & ID_STATE)
 8001cbe:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3370      	adds	r3, #112	@ 0x70
 8001ccc:	443b      	add	r3, r7
 8001cce:	3b50      	subs	r3, #80	@ 0x50
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d03e      	beq.n	8001d58 <main2+0x6c8>
                && (results[i].crcstate != state_known_crc[known_id]))
 8001cda:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001cde:	4613      	mov	r3, r2
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	3370      	adds	r3, #112	@ 0x70
 8001ce8:	443b      	add	r3, r7
 8001cea:	3b32      	subs	r3, #50	@ 0x32
 8001cec:	881a      	ldrh	r2, [r3, #0]
 8001cee:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001cf2:	497c      	ldr	r1, [pc, #496]	@ (8001ee4 <main2+0x854>)
 8001cf4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d02d      	beq.n	8001d58 <main2+0x6c8>
            {
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n\r",
 8001cfc:	f8b7 106e 	ldrh.w	r1, [r7, #110]	@ 0x6e
                          i,
                          results[i].crcstate,
 8001d00:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001d04:	4613      	mov	r3, r2
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	3370      	adds	r3, #112	@ 0x70
 8001d0e:	443b      	add	r3, r7
 8001d10:	3b32      	subs	r3, #50	@ 0x32
 8001d12:	881b      	ldrh	r3, [r3, #0]
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n\r",
 8001d14:	4618      	mov	r0, r3
                          state_known_crc[known_id]);
 8001d16:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001d1a:	4a72      	ldr	r2, [pc, #456]	@ (8001ee4 <main2+0x854>)
 8001d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n\r",
 8001d20:	4602      	mov	r2, r0
 8001d22:	4871      	ldr	r0, [pc, #452]	@ (8001ee8 <main2+0x858>)
 8001d24:	f002 fb36 	bl	8004394 <ee_printf>
                results[i].err++;
 8001d28:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	3370      	adds	r3, #112	@ 0x70
 8001d36:	443b      	add	r3, r7
 8001d38:	3b30      	subs	r3, #48	@ 0x30
 8001d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	b219      	sxth	r1, r3
 8001d46:	4613      	mov	r3, r2
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	3370      	adds	r3, #112	@ 0x70
 8001d50:	443b      	add	r3, r7
 8001d52:	3b30      	subs	r3, #48	@ 0x30
 8001d54:	460a      	mov	r2, r1
 8001d56:	801a      	strh	r2, [r3, #0]
            }
            total_errors += results[i].err;
 8001d58:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	3370      	adds	r3, #112	@ 0x70
 8001d66:	443b      	add	r3, r7
 8001d68:	3b30      	subs	r3, #48	@ 0x30
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001d74:	4413      	add	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        for (i = 0; i < default_num_contexts; i++)
 8001d7c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001d80:	3301      	adds	r3, #1
 8001d82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001d86:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001d8a:	4b58      	ldr	r3, [pc, #352]	@ (8001eec <main2+0x85c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	f4ff aef0 	bcc.w	8001b74 <main2+0x4e4>
        }
    }
    total_errors += check_data_types();
 8001d94:	f001 f922 	bl	8002fdc <check_data_types>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    /* and report results */
    ee_printf("CoreMark Size    : %lu\n\r", (long unsigned)results[0].size);
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	4619      	mov	r1, r3
 8001dac:	4850      	ldr	r0, [pc, #320]	@ (8001ef0 <main2+0x860>)
 8001dae:	f002 faf1 	bl	8004394 <ee_printf>
    ee_printf("Total ticks      : %lu\n\r", (long unsigned)total_time);
 8001db2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001db4:	484f      	ldr	r0, [pc, #316]	@ (8001ef4 <main2+0x864>)
 8001db6:	f002 faed 	bl	8004394 <ee_printf>
#if HAS_FLOAT
    ee_printf("Total time (secs): %f\n\r", time_in_secs(total_time));
 8001dba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001dbc:	f000 fd34 	bl	8002828 <time_in_secs>
 8001dc0:	ec53 2b10 	vmov	r2, r3, d0
 8001dc4:	484c      	ldr	r0, [pc, #304]	@ (8001ef8 <main2+0x868>)
 8001dc6:	f002 fae5 	bl	8004394 <ee_printf>
    if (time_in_secs(total_time) > 0)
 8001dca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001dcc:	f000 fd2c 	bl	8002828 <time_in_secs>
 8001dd0:	ec51 0b10 	vmov	r0, r1, d0
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	f7fe fe54 	bl	8000a88 <__aeabi_dcmpgt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d017      	beq.n	8001e16 <main2+0x786>
        ee_printf("Iterations/Sec   : %f\n\r",
                  default_num_contexts * results[0].iterations
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	4a40      	ldr	r2, [pc, #256]	@ (8001eec <main2+0x85c>)
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
        ee_printf("Iterations/Sec   : %f\n\r",
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb3f 	bl	8000474 <__aeabi_ui2d>
 8001df6:	4604      	mov	r4, r0
 8001df8:	460d      	mov	r5, r1
                      / time_in_secs(total_time));
 8001dfa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001dfc:	f000 fd14 	bl	8002828 <time_in_secs>
 8001e00:	ec53 2b10 	vmov	r2, r3, d0
        ee_printf("Iterations/Sec   : %f\n\r",
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe fcd8 	bl	80007bc <__aeabi_ddiv>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	483a      	ldr	r0, [pc, #232]	@ (8001efc <main2+0x86c>)
 8001e12:	f002 fabf 	bl	8004394 <ee_printf>
    if (time_in_secs(total_time) > 0)
        ee_printf("Iterations/Sec   : %d\n\r",
                  default_num_contexts * results[0].iterations
                      / time_in_secs(total_time));
#endif
    if (time_in_secs(total_time) < 10)
 8001e16:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001e18:	f000 fd06 	bl	8002828 <time_in_secs>
 8001e1c:	ec51 0b10 	vmov	r0, r1, d0
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b36      	ldr	r3, [pc, #216]	@ (8001f00 <main2+0x870>)
 8001e26:	f7fe fe11 	bl	8000a4c <__aeabi_dcmplt>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d009      	beq.n	8001e44 <main2+0x7b4>
    {
        ee_printf(
 8001e30:	4834      	ldr	r0, [pc, #208]	@ (8001f04 <main2+0x874>)
 8001e32:	f002 faaf 	bl	8004394 <ee_printf>
            "ERROR! Must execute for at least 10 secs for a valid result!\n\r");
        total_errors++;
 8001e36:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    }

    ee_printf("Iterations       : %lu\n\r",
              (long unsigned)default_num_contexts * results[0].iterations);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	4a29      	ldr	r2, [pc, #164]	@ (8001eec <main2+0x85c>)
 8001e48:	6812      	ldr	r2, [r2, #0]
    ee_printf("Iterations       : %lu\n\r",
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	482d      	ldr	r0, [pc, #180]	@ (8001f08 <main2+0x878>)
 8001e52:	f002 fa9f 	bl	8004394 <ee_printf>
    ee_printf("Compiler version : %s\n\r", COMPILER_VERSION);
 8001e56:	492d      	ldr	r1, [pc, #180]	@ (8001f0c <main2+0x87c>)
 8001e58:	482d      	ldr	r0, [pc, #180]	@ (8001f10 <main2+0x880>)
 8001e5a:	f002 fa9b 	bl	8004394 <ee_printf>
    ee_printf("Compiler flags   : %s\n\r", COMPILER_FLAGS);
 8001e5e:	492d      	ldr	r1, [pc, #180]	@ (8001f14 <main2+0x884>)
 8001e60:	482d      	ldr	r0, [pc, #180]	@ (8001f18 <main2+0x888>)
 8001e62:	f002 fa97 	bl	8004394 <ee_printf>
#if (MULTITHREAD > 1)
    ee_printf("Parallel %s : %d\n\r", PARALLEL_METHOD, default_num_contexts);
#endif
    ee_printf("Memory location  : %s\n\r", MEM_LOCATION);
 8001e66:	492d      	ldr	r1, [pc, #180]	@ (8001f1c <main2+0x88c>)
 8001e68:	482d      	ldr	r0, [pc, #180]	@ (8001f20 <main2+0x890>)
 8001e6a:	f002 fa93 	bl	8004394 <ee_printf>
    /* output for verification */
    ee_printf("seedcrc          : 0x%04x\n\r", seedcrc);
 8001e6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001e72:	4619      	mov	r1, r3
 8001e74:	482b      	ldr	r0, [pc, #172]	@ (8001f24 <main2+0x894>)
 8001e76:	f002 fa8d 	bl	8004394 <ee_printf>
    if (results[0].execs & ID_LIST)
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01e      	beq.n	8001ec2 <main2+0x832>
        for (i = 0; i < default_num_contexts; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001e8a:	e014      	b.n	8001eb6 <main2+0x826>
            ee_printf("[%d]crclist       : 0x%04x\n\r", i, results[i].crclist);
 8001e8c:	f8b7 106e 	ldrh.w	r1, [r7, #110]	@ 0x6e
 8001e90:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	3370      	adds	r3, #112	@ 0x70
 8001e9e:	443b      	add	r3, r7
 8001ea0:	3b36      	subs	r3, #54	@ 0x36
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4820      	ldr	r0, [pc, #128]	@ (8001f28 <main2+0x898>)
 8001ea8:	f002 fa74 	bl	8004394 <ee_printf>
        for (i = 0; i < default_num_contexts; i++)
 8001eac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001eb6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001eba:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <main2+0x85c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3e4      	bcc.n	8001e8c <main2+0x7fc>
    if (results[0].execs & ID_MATRIX)
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d04a      	beq.n	8001f62 <main2+0x8d2>
        for (i = 0; i < default_num_contexts; i++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001ed2:	e040      	b.n	8001f56 <main2+0x8c6>
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	080057b0 	.word	0x080057b0
 8001edc:	2000000c 	.word	0x2000000c
 8001ee0:	080057e0 	.word	0x080057e0
 8001ee4:	20000018 	.word	0x20000018
 8001ee8:	08005814 	.word	0x08005814
 8001eec:	2000002c 	.word	0x2000002c
 8001ef0:	08005848 	.word	0x08005848
 8001ef4:	08005864 	.word	0x08005864
 8001ef8:	08005880 	.word	0x08005880
 8001efc:	08005898 	.word	0x08005898
 8001f00:	40240000 	.word	0x40240000
 8001f04:	080058b0 	.word	0x080058b0
 8001f08:	080058f0 	.word	0x080058f0
 8001f0c:	0800590c 	.word	0x0800590c
 8001f10:	08005920 	.word	0x08005920
 8001f14:	08005938 	.word	0x08005938
 8001f18:	08005950 	.word	0x08005950
 8001f1c:	08005968 	.word	0x08005968
 8001f20:	08005970 	.word	0x08005970
 8001f24:	08005988 	.word	0x08005988
 8001f28:	080059a4 	.word	0x080059a4
            ee_printf("[%d]crcmatrix     : 0x%04x\n\r", i, results[i].crcmatrix);
 8001f2c:	f8b7 106e 	ldrh.w	r1, [r7, #110]	@ 0x6e
 8001f30:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3370      	adds	r3, #112	@ 0x70
 8001f3e:	443b      	add	r3, r7
 8001f40:	3b34      	subs	r3, #52	@ 0x34
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	484b      	ldr	r0, [pc, #300]	@ (8002074 <main2+0x9e4>)
 8001f48:	f002 fa24 	bl	8004394 <ee_printf>
        for (i = 0; i < default_num_contexts; i++)
 8001f4c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001f50:	3301      	adds	r3, #1
 8001f52:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001f56:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001f5a:	4b47      	ldr	r3, [pc, #284]	@ (8002078 <main2+0x9e8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d3e4      	bcc.n	8001f2c <main2+0x89c>
    if (results[0].execs & ID_STATE)
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01e      	beq.n	8001faa <main2+0x91a>
        for (i = 0; i < default_num_contexts; i++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001f72:	e014      	b.n	8001f9e <main2+0x90e>
            ee_printf("[%d]crcstate      : 0x%04x\n\r", i, results[i].crcstate);
 8001f74:	f8b7 106e 	ldrh.w	r1, [r7, #110]	@ 0x6e
 8001f78:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3370      	adds	r3, #112	@ 0x70
 8001f86:	443b      	add	r3, r7
 8001f88:	3b32      	subs	r3, #50	@ 0x32
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	483b      	ldr	r0, [pc, #236]	@ (800207c <main2+0x9ec>)
 8001f90:	f002 fa00 	bl	8004394 <ee_printf>
        for (i = 0; i < default_num_contexts; i++)
 8001f94:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001f9e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001fa2:	4b35      	ldr	r3, [pc, #212]	@ (8002078 <main2+0x9e8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3e4      	bcc.n	8001f74 <main2+0x8e4>
    for (i = 0; i < default_num_contexts; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001fb0:	e014      	b.n	8001fdc <main2+0x94c>
        ee_printf("[%d]crcfinal      : 0x%04x\n\r", i, results[i].crc);
 8001fb2:	f8b7 106e 	ldrh.w	r1, [r7, #110]	@ 0x6e
 8001fb6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	3370      	adds	r3, #112	@ 0x70
 8001fc4:	443b      	add	r3, r7
 8001fc6:	3b38      	subs	r3, #56	@ 0x38
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	482c      	ldr	r0, [pc, #176]	@ (8002080 <main2+0x9f0>)
 8001fce:	f002 f9e1 	bl	8004394 <ee_printf>
    for (i = 0; i < default_num_contexts; i++)
 8001fd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001fdc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001fe0:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <main2+0x9e8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3e4      	bcc.n	8001fb2 <main2+0x922>
    if (total_errors == 0)
 8001fe8:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d129      	bne.n	8002044 <main2+0x9b4>
    {
        ee_printf(
 8001ff0:	4824      	ldr	r0, [pc, #144]	@ (8002084 <main2+0x9f4>)
 8001ff2:	f002 f9cf 	bl	8004394 <ee_printf>
            "Correct operation validated. See README.md for run and reporting "
            "rules.\n\r");
#if HAS_FLOAT
        if (known_id == 3)
 8001ff6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d122      	bne.n	8002044 <main2+0x9b4>
        {
            ee_printf("CoreMark 1.0 : %f / %s %s",
                      default_num_contexts * results[0].iterations
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <main2+0x9e8>)
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	fb02 f303 	mul.w	r3, r2, r3
            ee_printf("CoreMark 1.0 : %f / %s %s",
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa33 	bl	8000474 <__aeabi_ui2d>
 800200e:	4604      	mov	r4, r0
 8002010:	460d      	mov	r5, r1
                          / time_in_secs(total_time),
 8002012:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002014:	f000 fc08 	bl	8002828 <time_in_secs>
 8002018:	ec53 2b10 	vmov	r2, r3, d0
            ee_printf("CoreMark 1.0 : %f / %s %s",
 800201c:	4620      	mov	r0, r4
 800201e:	4629      	mov	r1, r5
 8002020:	f7fe fbcc 	bl	80007bc <__aeabi_ddiv>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4917      	ldr	r1, [pc, #92]	@ (8002088 <main2+0x9f8>)
 800202a:	9101      	str	r1, [sp, #4]
 800202c:	4917      	ldr	r1, [pc, #92]	@ (800208c <main2+0x9fc>)
 800202e:	9100      	str	r1, [sp, #0]
 8002030:	4817      	ldr	r0, [pc, #92]	@ (8002090 <main2+0xa00>)
 8002032:	f002 f9af 	bl	8004394 <ee_printf>
                      COMPILER_VERSION,
                      COMPILER_FLAGS);
#if defined(MEM_LOCATION) && !defined(MEM_LOCATION_UNSPEC)
            ee_printf(" / %s", MEM_LOCATION);
 8002036:	4917      	ldr	r1, [pc, #92]	@ (8002094 <main2+0xa04>)
 8002038:	4817      	ldr	r0, [pc, #92]	@ (8002098 <main2+0xa08>)
 800203a:	f002 f9ab 	bl	8004394 <ee_printf>
#endif

#if (MULTITHREAD > 1)
            ee_printf(" / %d:%s", default_num_contexts, PARALLEL_METHOD);
#endif
            ee_printf("\n\r");
 800203e:	4817      	ldr	r0, [pc, #92]	@ (800209c <main2+0xa0c>)
 8002040:	f002 f9a8 	bl	8004394 <ee_printf>
        }
#endif
    }
    if (total_errors > 0)
 8002044:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8002048:	2b00      	cmp	r3, #0
 800204a:	dd02      	ble.n	8002052 <main2+0x9c2>
        ee_printf("Errors detected\n\r");
 800204c:	4814      	ldr	r0, [pc, #80]	@ (80020a0 <main2+0xa10>)
 800204e:	f002 f9a1 	bl	8004394 <ee_printf>
    if (total_errors < 0)
 8002052:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8002056:	2b00      	cmp	r3, #0
 8002058:	da02      	bge.n	8002060 <main2+0x9d0>
        ee_printf(
 800205a:	4812      	ldr	r0, [pc, #72]	@ (80020a4 <main2+0xa14>)
 800205c:	f002 f99a 	bl	8004394 <ee_printf>
#if (MEM_METHOD == MEM_MALLOC)
    for (i = 0; i < MULTITHREAD; i++)
        portable_free(results[i].memblock[0]);
#endif
    /* And last call any target specific code for finalizing */
    portable_fini(&(results[0].port));
 8002060:	463b      	mov	r3, r7
 8002062:	3342      	adds	r3, #66	@ 0x42
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fc37 	bl	80028d8 <portable_fini>

    return MAIN_RETURN_VAL;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3770      	adds	r7, #112	@ 0x70
 8002070:	46bd      	mov	sp, r7
 8002072:	bdb0      	pop	{r4, r5, r7, pc}
 8002074:	080059c4 	.word	0x080059c4
 8002078:	2000002c 	.word	0x2000002c
 800207c:	080059e4 	.word	0x080059e4
 8002080:	08005a04 	.word	0x08005a04
 8002084:	08005a24 	.word	0x08005a24
 8002088:	08005938 	.word	0x08005938
 800208c:	0800590c 	.word	0x0800590c
 8002090:	08005a70 	.word	0x08005a70
 8002094:	08005968 	.word	0x08005968
 8002098:	08005a8c 	.word	0x08005a8c
 800209c:	08005a94 	.word	0x08005a94
 80020a0:	08005a98 	.word	0x08005a98
 80020a4:	08005aac 	.word	0x08005aac

080020a8 <core_bench_matrix>:
	Benchmark function

	Iterate <matrix_test> N times, 
	changing the matrix values slightly by a constant amount each time.
*/
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	@ 0x28
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	803b      	strh	r3, [r7, #0]
	ee_u32 N=p->N;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61fb      	str	r3, [r7, #28]
	MATRES *C=p->C;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	61bb      	str	r3, [r7, #24]
	MATDAT *A=p->A;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	617b      	str	r3, [r7, #20]
	MATDAT *B=p->B;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	613b      	str	r3, [r7, #16]
	MATDAT val=(MATDAT)seed;
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	81fb      	strh	r3, [r7, #14]

	crc=crc16(matrix_test(N,C,A,B,val),crc);
 80020d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	69f8      	ldr	r0, [r7, #28]
 80020e2:	f000 f80e 	bl	8002102 <matrix_test>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	883b      	ldrh	r3, [r7, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f000 ff61 	bl	8002fb6 <crc16>
 80020f4:	4603      	mov	r3, r0
 80020f6:	803b      	strh	r3, [r7, #0]

	return crc;
 80020f8:	883b      	ldrh	r3, [r7, #0]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <matrix_test>:
	4 - Multiply a matrix by a matrix.
	5 - Add a constant value to all elements of a matrix.

	After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	603b      	str	r3, [r7, #0]
	ee_u16 crc=0;
 8002110:	2300      	movs	r3, #0
 8002112:	82fb      	strh	r3, [r7, #22]
	MATDAT clipval=matrix_big(val);
 8002114:	8c3b      	ldrh	r3, [r7, #32]
 8002116:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800211a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800211e:	82bb      	strh	r3, [r7, #20]

	matrix_add_const(N,A,val); /* make sure data changes  */
 8002120:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002124:	461a      	mov	r2, r3
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f98d 	bl	8002448 <matrix_add_const>
#if CORE_DEBUG
	printmat(A,N,"matrix_add_const");
#endif
	matrix_mul_const(N,C,A,val);
 800212e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f94a 	bl	80023d0 <matrix_mul_const>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800213c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002140:	461a      	mov	r2, r3
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f8ef 	bl	8002328 <matrix_sum>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	8afb      	ldrh	r3, [r7, #22]
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f000 ff2f 	bl	8002fb6 <crc16>
 8002158:	4603      	mov	r3, r0
 800215a:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_const");
#endif
	matrix_mul_vect(N,C,A,B);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f9ac 	bl	80024c0 <matrix_mul_vect>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 8002168:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800216c:	461a      	mov	r2, r3
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f8d9 	bl	8002328 <matrix_sum>
 8002176:	4603      	mov	r3, r0
 8002178:	461a      	mov	r2, r3
 800217a:	8afb      	ldrh	r3, [r7, #22]
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f000 ff19 	bl	8002fb6 <crc16>
 8002184:	4603      	mov	r3, r0
 8002186:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_vect");
#endif
	matrix_mul_matrix(N,C,A,B);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f9dd 	bl	800254e <matrix_mul_matrix>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 8002194:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002198:	461a      	mov	r2, r3
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f8c3 	bl	8002328 <matrix_sum>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	8afb      	ldrh	r3, [r7, #22]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f000 ff03 	bl	8002fb6 <crc16>
 80021b0:	4603      	mov	r3, r0
 80021b2:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix");
#endif
	matrix_mul_matrix_bitextract(N,C,A,B);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fa2c 	bl	8002618 <matrix_mul_matrix_bitextract>
	crc=crc16(matrix_sum(N,C,clipval),crc);
 80021c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021c4:	461a      	mov	r2, r3
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f8ad 	bl	8002328 <matrix_sum>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	8afb      	ldrh	r3, [r7, #22]
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 feed 	bl	8002fb6 <crc16>
 80021dc:	4603      	mov	r3, r0
 80021de:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif
	
	matrix_add_const(N,A,-val); /* return matrix to initial value */
 80021e0:	8c3b      	ldrh	r3, [r7, #32]
 80021e2:	425b      	negs	r3, r3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f92b 	bl	8002448 <matrix_add_const>
	return crc;
 80021f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <core_init_matrix>:
	Matrix dimensions.
	
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
 80021fe:	b480      	push	{r7}
 8002200:	b08d      	sub	sp, #52	@ 0x34
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]
	ee_u32 N=0;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
	MATDAT *A;
	MATDAT *B;
	ee_s32 order=1;
 8002210:	2301      	movs	r3, #1
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
	MATDAT val;
	ee_u32 i=0,j=0;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (seed==0)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10a      	bne.n	8002238 <core_init_matrix+0x3a>
		seed=1;
 8002222:	2301      	movs	r3, #1
 8002224:	607b      	str	r3, [r7, #4]
	while (j<blksize) {
 8002226:	e007      	b.n	8002238 <core_init_matrix+0x3a>
		i++;
 8002228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222a:	3301      	adds	r3, #1
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
		j=i*i*2*4;		
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	fb03 f303 	mul.w	r3, r3, r3
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
	while (j<blksize) {
 8002238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d3f3      	bcc.n	8002228 <core_init_matrix+0x2a>
	}
	N=i-1;
 8002240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	623b      	str	r3, [r7, #32]
	A=(MATDAT *)align_mem(memblk);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3b01      	subs	r3, #1
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	3304      	adds	r3, #4
 8002250:	61fb      	str	r3, [r7, #28]
	B=A+N*N;
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	fb03 f303 	mul.w	r3, r3, r3
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	4413      	add	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]

	for (i=0; i<N; i++) {
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002264:	e03f      	b.n	80022e6 <core_init_matrix+0xe8>
		for (j=0; j<N; j++) {
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
 800226a:	e035      	b.n	80022d8 <core_init_matrix+0xda>
			seed = ( ( order * seed ) % 65536 );
 800226c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	425a      	negs	r2, r3
 8002276:	b29b      	uxth	r3, r3
 8002278:	b292      	uxth	r2, r2
 800227a:	bf58      	it	pl
 800227c:	4253      	negpl	r3, r2
 800227e:	607b      	str	r3, [r7, #4]
			val = (seed + order);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	b29a      	uxth	r2, r3
 8002284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002286:	b29b      	uxth	r3, r3
 8002288:	4413      	add	r3, r2
 800228a:	b29b      	uxth	r3, r3
 800228c:	82fb      	strh	r3, [r7, #22]
			val=matrix_clip(val,0);
			B[i*N+j] = val;
 800228e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002290:	6a3a      	ldr	r2, [r7, #32]
 8002292:	fb03 f202 	mul.w	r2, r3, r2
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	4413      	add	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4413      	add	r3, r2
 80022a0:	8afa      	ldrh	r2, [r7, #22]
 80022a2:	801a      	strh	r2, [r3, #0]
			val =  (val + order);
 80022a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	8afb      	ldrh	r3, [r7, #22]
 80022aa:	4413      	add	r3, r2
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	82fb      	strh	r3, [r7, #22]
			val=matrix_clip(val,1);
 80022b0:	8afb      	ldrh	r3, [r7, #22]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	82fb      	strh	r3, [r7, #22]
			A[i*N+j] = val;
 80022b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b8:	6a3a      	ldr	r2, [r7, #32]
 80022ba:	fb03 f202 	mul.w	r2, r3, r2
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	4413      	add	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	8afa      	ldrh	r2, [r7, #22]
 80022ca:	801a      	strh	r2, [r3, #0]
			order++;
 80022cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ce:	3301      	adds	r3, #1
 80022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (j=0; j<N; j++) {
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	3301      	adds	r3, #1
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3c5      	bcc.n	800226c <core_init_matrix+0x6e>
	for (i=0; i<N; i++) {
 80022e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e2:	3301      	adds	r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d3bb      	bcc.n	8002266 <core_init_matrix+0x68>
		}
	}

	p->A=A;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	605a      	str	r2, [r3, #4]
	p->B=B;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	609a      	str	r2, [r3, #8]
	p->C=(MATRES *)align_mem(B+N*N);
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	fb03 f303 	mul.w	r3, r3, r3
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4413      	add	r3, r2
 8002306:	3b01      	subs	r3, #1
 8002308:	f023 0303 	bic.w	r3, r3, #3
 800230c:	3304      	adds	r3, #4
 800230e:	461a      	mov	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	60da      	str	r2, [r3, #12]
	p->N=N;
 8002314:	6a3a      	ldr	r2, [r7, #32]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	601a      	str	r2, [r3, #0]
#if CORE_DEBUG
	printmat(A,N,"A");
	printmat(B,N,"B");
#endif
	return N;
 800231a:	6a3b      	ldr	r3, [r7, #32]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3734      	adds	r7, #52	@ 0x34
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <matrix_sum>:
	As long as this value is under the parameter clipval, 
	add 1 to the result if the element is bigger then the previous.
	
	Otherwise, reset the accumulator and add 10 to the result.
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
 8002328:	b480      	push	{r7}
 800232a:	b08b      	sub	sp, #44	@ 0x2c
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
	MATRES tmp=0,prev=0,cur=0;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
	ee_s16 ret=0;
 8002342:	2300      	movs	r3, #0
 8002344:	83fb      	strh	r3, [r7, #30]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	e035      	b.n	80023b8 <matrix_sum+0x90>
		for (j=0; j<N; j++) {
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e02b      	b.n	80023aa <matrix_sum+0x82>
			cur=C[i*N+j];
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	fb03 f202 	mul.w	r2, r3, r2
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	4413      	add	r3, r2
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	613b      	str	r3, [r7, #16]
			tmp+=cur;
 8002368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
			if (tmp>clipval) {
 8002370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002376:	429a      	cmp	r2, r3
 8002378:	dd06      	ble.n	8002388 <matrix_sum+0x60>
				ret+=10;
 800237a:	8bfb      	ldrh	r3, [r7, #30]
 800237c:	330a      	adds	r3, #10
 800237e:	b29b      	uxth	r3, r3
 8002380:	83fb      	strh	r3, [r7, #30]
				tmp=0;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
 8002386:	e00b      	b.n	80023a0 <matrix_sum+0x78>
			} else {
				ret += (cur>prev) ? 1 : 0;
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	429a      	cmp	r2, r3
 800238e:	bfcc      	ite	gt
 8002390:	2301      	movgt	r3, #1
 8002392:	2300      	movle	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	8bfb      	ldrh	r3, [r7, #30]
 800239a:	4413      	add	r3, r2
 800239c:	b29b      	uxth	r3, r3
 800239e:	83fb      	strh	r3, [r7, #30]
			}
			prev=cur;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	623b      	str	r3, [r7, #32]
		for (j=0; j<N; j++) {
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3301      	adds	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3cf      	bcc.n	8002352 <matrix_sum+0x2a>
	for (i=0; i<N; i++) {
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3c5      	bcc.n	800234c <matrix_sum+0x24>
		}
	}
	return ret;
 80023c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	372c      	adds	r7, #44	@ 0x2c
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <matrix_mul_const>:

/* Function: matrix_mul_const
	Multiply a matrix by a constant.
	This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	807b      	strh	r3, [r7, #2]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e026      	b.n	8002432 <matrix_mul_const+0x62>
		for (j=0; j<N; j++) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	e01c      	b.n	8002424 <matrix_mul_const+0x54>
			C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	fb03 f202 	mul.w	r2, r3, r2
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002400:	4618      	mov	r0, r3
 8002402:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	68f9      	ldr	r1, [r7, #12]
 800240a:	fb03 f101 	mul.w	r1, r3, r1
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	440b      	add	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	440b      	add	r3, r1
 8002418:	fb00 f202 	mul.w	r2, r0, r2
 800241c:	601a      	str	r2, [r3, #0]
		for (j=0; j<N; j++) {
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	3301      	adds	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d3de      	bcc.n	80023ea <matrix_mul_const+0x1a>
	for (i=0; i<N; i++) {
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3d4      	bcc.n	80023e4 <matrix_mul_const+0x14>
		}
	}
}
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <matrix_add_const>:

/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e026      	b.n	80024aa <matrix_add_const+0x62>
		for (j=0; j<N; j++) {
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e01c      	b.n	800249c <matrix_add_const+0x54>
			A[i*N+j] += val;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	fb03 f202 	mul.w	r2, r3, r2
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	4413      	add	r3, r2
 8002474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002478:	b29a      	uxth	r2, r3
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4413      	add	r3, r2
 800247e:	b299      	uxth	r1, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	fb03 f202 	mul.w	r2, r3, r2
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	4413      	add	r3, r2
 8002492:	b20a      	sxth	r2, r1
 8002494:	801a      	strh	r2, [r3, #0]
		for (j=0; j<N; j++) {
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	3301      	adds	r3, #1
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3de      	bcc.n	8002462 <matrix_add_const+0x1a>
	for (i=0; i<N; i++) {
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3301      	adds	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d3d4      	bcc.n	800245c <matrix_add_const+0x14>
		}
	}
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <matrix_mul_vect>:

/* Function: matrix_mul_vect
	Multiply a matrix by a vector.
	This is common in many simple filters (e.g. fir where a vector of coefficients is applied to the matrix.)
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e031      	b.n	8002538 <matrix_mul_vect+0x78>
		C[i]=0;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	4413      	add	r3, r2
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
		for (j=0; j<N; j++) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	e021      	b.n	800252a <matrix_mul_vect+0x6a>
			C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	4413      	add	r3, r2
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	fb03 f202 	mul.w	r2, r3, r2
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	4618      	mov	r0, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002514:	fb03 f200 	mul.w	r2, r3, r0
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	68b8      	ldr	r0, [r7, #8]
 800251e:	4403      	add	r3, r0
 8002520:	440a      	add	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
		for (j=0; j<N; j++) {
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	3301      	adds	r3, #1
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3d9      	bcc.n	80024e6 <matrix_mul_vect+0x26>
	for (i=0; i<N; i++) {
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3301      	adds	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d3c9      	bcc.n	80024d4 <matrix_mul_vect+0x14>
		}
	}
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <matrix_mul_matrix>:

/* Function: matrix_mul_matrix
	Multiply a matrix by a matrix.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
 800254e:	b480      	push	{r7}
 8002550:	b089      	sub	sp, #36	@ 0x24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	603b      	str	r3, [r7, #0]
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	e04f      	b.n	8002602 <matrix_mul_matrix+0xb4>
		for (j=0; j<N; j++) {
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e045      	b.n	80025f4 <matrix_mul_matrix+0xa6>
			C[i*N+j]=0;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	fb03 f202 	mul.w	r2, r3, r2
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4413      	add	r3, r2
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e030      	b.n	80025e6 <matrix_mul_matrix+0x98>
			{
				C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	fb03 f202 	mul.w	r2, r3, r2
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	4413      	add	r3, r2
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	fb03 f202 	mul.w	r2, r3, r2
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4413      	add	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ae:	4618      	mov	r0, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	fb03 f202 	mul.w	r2, r3, r2
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4413      	add	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c6:	fb03 f200 	mul.w	r2, r3, r0
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	fb03 f000 	mul.w	r0, r3, r0
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4403      	add	r3, r0
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	68b8      	ldr	r0, [r7, #8]
 80025da:	4403      	add	r3, r0
 80025dc:	440a      	add	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3301      	adds	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3ca      	bcc.n	8002584 <matrix_mul_matrix+0x36>
		for (j=0; j<N; j++) {
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3b5      	bcc.n	8002568 <matrix_mul_matrix+0x1a>
	for (i=0; i<N; i++) {
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	3301      	adds	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	429a      	cmp	r2, r3
 8002608:	d3ab      	bcc.n	8002562 <matrix_mul_matrix+0x14>
			}
		}
	}
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	3724      	adds	r7, #36	@ 0x24
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <matrix_mul_matrix_bitextract>:

/* Function: matrix_mul_matrix_bitextract
	Multiply a matrix by a matrix, and extract some bits from the result.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e05c      	b.n	80026e6 <matrix_mul_matrix_bitextract+0xce>
		for (j=0; j<N; j++) {
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e052      	b.n	80026d8 <matrix_mul_matrix_bitextract+0xc0>
			C[i*N+j]=0;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	fb03 f202 	mul.w	r2, r3, r2
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	4413      	add	r3, r2
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e03d      	b.n	80026ca <matrix_mul_matrix_bitextract+0xb2>
			{
				MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	fb03 f202 	mul.w	r2, r3, r2
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	4413      	add	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002664:	4619      	mov	r1, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	fb03 f202 	mul.w	r2, r3, r2
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4413      	add	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	4413      	add	r3, r2
 8002678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	613b      	str	r3, [r7, #16]
				C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	fb03 f202 	mul.w	r2, r3, r2
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4619      	mov	r1, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	109b      	asrs	r3, r3, #2
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	1152      	asrs	r2, r2, #5
 80026a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	4419      	add	r1, r3
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	fb03 f202 	mul.w	r2, r3, r2
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	4413      	add	r3, r2
 80026c0:	460a      	mov	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
			for(k=0;k<N;k++)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3bd      	bcc.n	800264e <matrix_mul_matrix_bitextract+0x36>
		for (j=0; j<N; j++) {
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3a8      	bcc.n	8002632 <matrix_mul_matrix_bitextract+0x1a>
	for (i=0; i<N; i++) {
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	3301      	adds	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d39e      	bcc.n	800262c <matrix_mul_matrix_bitextract+0x14>
			}
		}
	}
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	3724      	adds	r7, #36	@ 0x24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <barebones_clock>:


#define SAMPLE_TIME_IMPLEMENTATION 1


CORETIMETYPE barebones_clock() {
 80026fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
	
	extern __IO uint32_t uwTick ;
  if(start)
 8002704:	4b2f      	ldr	r3, [pc, #188]	@ (80027c4 <barebones_clock+0xc8>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d041      	beq.n	8002790 <barebones_clock+0x94>
  {
    SysTick->CTRL = 0;
 800270c:	4b2e      	ldr	r3, [pc, #184]	@ (80027c8 <barebones_clock+0xcc>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
    
    uint64_t tmp1 = ((uint64_t)uwTick * SYSTICK_LOAD);
 8002712:	4b2e      	ldr	r3, [pc, #184]	@ (80027cc <barebones_clock+0xd0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2200      	movs	r2, #0
 8002718:	461c      	mov	r4, r3
 800271a:	4615      	mov	r5, r2
 800271c:	4622      	mov	r2, r4
 800271e:	462b      	mov	r3, r5
 8002720:	f04f 0000 	mov.w	r0, #0
 8002724:	f04f 0100 	mov.w	r1, #0
 8002728:	0619      	lsls	r1, r3, #24
 800272a:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 800272e:	0610      	lsls	r0, r2, #24
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	1b11      	subs	r1, r2, r4
 8002736:	6039      	str	r1, [r7, #0]
 8002738:	eb63 0305 	sbc.w	r3, r3, r5
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002742:	e9c7 3402 	strd	r3, r4, [r7, #8]
    tmp1 += (SYSTICK_LOAD - SysTick->VAL);
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <barebones_clock+0xcc>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f1c3 13ff 	rsb	r3, r3, #16711935	@ 0xff00ff
 800274e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002752:	2200      	movs	r2, #0
 8002754:	4698      	mov	r8, r3
 8002756:	4691      	mov	r9, r2
 8002758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800275c:	eb12 0a08 	adds.w	sl, r2, r8
 8002760:	eb43 0b09 	adc.w	fp, r3, r9
 8002764:	e9c7 ab02 	strd	sl, fp, [r7, #8]
    tmp1 /=TIMER_RES_DIVIDER;
 8002768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800276c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	f7fe f9da 	bl	8000b2c <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if (tmp1 > OVERFLOW_VAR)
 8002780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d301      	bcc.n	800278c <barebones_clock+0x90>
    {
      /* if end time = start time there is an overflow*/
      return 0;
 8002788:	2300      	movs	r3, #0
 800278a:	e015      	b.n	80027b8 <barebones_clock+0xbc>
    }
    else
    {
      return (uint32_t)tmp1;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	e013      	b.n	80027b8 <barebones_clock+0xbc>
    }
  }
  else
  {
		start=1;
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <barebones_clock+0xc8>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
    uwTick = NULL;
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <barebones_clock+0xd0>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
		SysTick->CTRL = NULL;
 800279c:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <barebones_clock+0xcc>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
    SysTick->VAL = NULL;
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <barebones_clock+0xcc>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
    SysTick->LOAD = SYSTICK_LOAD;
 80027a8:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <barebones_clock+0xcc>)
 80027aa:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80027ae:	605a      	str	r2, [r3, #4]
    SysTick->CTRL = SYSTICK_START;
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <barebones_clock+0xcc>)
 80027b2:	2207      	movs	r2, #7
 80027b4:	601a      	str	r2, [r3, #0]
  }
  return 0;
 80027b6:	2300      	movs	r3, #0

}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c2:	bf00      	nop
 80027c4:	20000870 	.word	0x20000870
 80027c8:	e000e010 	.word	0xe000e010
 80027cc:	200008d0 	.word	0x200008d0

080027d0 <start_time>:
	This function will be called right before starting the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code)
	or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	GETMYTIME(&start_time_val );
 80027d4:	f7ff ff92 	bl	80026fc <barebones_clock>
 80027d8:	4603      	mov	r3, r0
 80027da:	4a02      	ldr	r2, [pc, #8]	@ (80027e4 <start_time+0x14>)
 80027dc:	6013      	str	r3, [r2, #0]
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000880 	.word	0x20000880

080027e8 <stop_time>:
	This function will be called right after ending the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code)
	or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
		GETMYTIME(&stop_time_val );
 80027ec:	f7ff ff86 	bl	80026fc <barebones_clock>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a02      	ldr	r2, [pc, #8]	@ (80027fc <stop_time+0x14>)
 80027f4:	6013      	str	r3, [r2, #0]
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000884 	.word	0x20000884

08002800 <get_time>:
	This methodology is taken to accomodate any hardware or simulated platform.
	The sample implementation returns millisecs by default,
	and the resolution is controlled by <TIMER_RES_DIVIDER>
*/

CORE_TICKS get_time(void) {
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
	CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <get_time+0x20>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <get_time+0x24>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	607b      	str	r3, [r7, #4]
	return elapsed;
 8002812:	687b      	ldr	r3, [r7, #4]
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	20000884 	.word	0x20000884
 8002824:	20000880 	.word	0x20000880

08002828 <time_in_secs>:
*/
// #define CLOCKS_PER_SEC 55000000 // moved to project defines



secs_ret time_in_secs(CORE_TICKS ticks) {
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7fd fe1f 	bl	8000474 <__aeabi_ui2d>
 8002836:	4604      	mov	r4, r0
 8002838:	460d      	mov	r5, r1
 800283a:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <time_in_secs+0x50>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a0f      	ldr	r2, [pc, #60]	@ (800287c <time_in_secs+0x54>)
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe14 	bl	8000474 <__aeabi_ui2d>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd ffb2 	bl	80007bc <__aeabi_ddiv>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return retval;
 8002860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002864:	ec43 2b17 	vmov	d7, r2, r3
}
 8002868:	eeb0 0a47 	vmov.f32	s0, s14
 800286c:	eef0 0a67 	vmov.f32	s1, s15
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bdb0      	pop	{r4, r5, r7, pc}
 8002876:	bf00      	nop
 8002878:	20000078 	.word	0x20000078
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <portable_init>:
/* Function : portable_init
	Target specific initialization code
	Test for some common mistakes.
*/
void portable_init(core_portable *p, int *argc, char *argv[])
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
		ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
	}
	if (sizeof(ee_u32) != 4) {
		ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
	}
	p->portable_id=1;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
	ee_printf("********Start Coremark**********\n\r");
 8002892:	480b      	ldr	r0, [pc, #44]	@ (80028c0 <portable_init+0x40>)
 8002894:	f001 fd7e 	bl	8004394 <ee_printf>
	ee_printf("System frequency : %d MHz \n\r",SystemCoreClock/1000000);
 8002898:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <portable_init+0x44>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <portable_init+0x48>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	0c9b      	lsrs	r3, r3, #18
 80028a4:	4619      	mov	r1, r3
 80028a6:	4809      	ldr	r0, [pc, #36]	@ (80028cc <portable_init+0x4c>)
 80028a8:	f001 fd74 	bl	8004394 <ee_printf>
	  ee_printf("FLASH_ACR: 0x%X\n\r",(uint32_t)FLASH->ACR);
 80028ac:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <portable_init+0x50>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	4808      	ldr	r0, [pc, #32]	@ (80028d4 <portable_init+0x54>)
 80028b4:	f001 fd6e 	bl	8004394 <ee_printf>
//   ee_printf("ICACHE_CR: 0x%X\n\r",(uint32_t)ICACHE->CR);
//   ee_printf("DCACHE_CR: 0x%X\n\r",(uint32_t)DCACHE1->CR);

}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	08005b10 	.word	0x08005b10
 80028c4:	20000078 	.word	0x20000078
 80028c8:	431bde83 	.word	0x431bde83
 80028cc:	08005b34 	.word	0x08005b34
 80028d0:	40023c00 	.word	0x40023c00
 80028d4:	08005b54 	.word	0x08005b54

080028d8 <portable_fini>:
/* Function : portable_fini
	Target specific final code
*/
void portable_fini(core_portable *p)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	p->portable_id=0;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
		ee_printf("DONE\n\r");
 80028e6:	4803      	ldr	r0, [pc, #12]	@ (80028f4 <portable_fini+0x1c>)
 80028e8:	f001 fd54 	bl	8004394 <ee_printf>
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	08005b68 	.word	0x08005b68

080028f8 <core_bench_state>:

	Go over the input twice, once direct, and once after introducing some corruption. 
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock, 
		ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc) 
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b098      	sub	sp, #96	@ 0x60
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	460b      	mov	r3, r1
 8002908:	80fb      	strh	r3, [r7, #6]
 800290a:	4613      	mov	r3, r2
 800290c:	80bb      	strh	r3, [r7, #4]
	ee_u32 final_counts[NUM_CORE_STATES];
	ee_u32 track_counts[NUM_CORE_STATES];
	ee_u8 *p=memblock;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	617b      	str	r3, [r7, #20]


#if CORE_DEBUG
	ee_printf("State Bench: %d,%d,%d,%04x\n",seed1,seed2,step,crc);
#endif
	for (i=0; i<NUM_CORE_STATES; i++) {
 8002912:	2300      	movs	r3, #0
 8002914:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002916:	e015      	b.n	8002944 <core_bench_state+0x4c>
		final_counts[i]=track_counts[i]=0;
 8002918:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	3360      	adds	r3, #96	@ 0x60
 800291e:	443b      	add	r3, r7
 8002920:	2200      	movs	r2, #0
 8002922:	f843 2c48 	str.w	r2, [r3, #-72]
 8002926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	3360      	adds	r3, #96	@ 0x60
 800292c:	443b      	add	r3, r7
 800292e:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8002932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	3360      	adds	r3, #96	@ 0x60
 8002938:	443b      	add	r3, r7
 800293a:	f843 2c28 	str.w	r2, [r3, #-40]
	for (i=0; i<NUM_CORE_STATES; i++) {
 800293e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002940:	3301      	adds	r3, #1
 8002942:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002946:	2b07      	cmp	r3, #7
 8002948:	d9e6      	bls.n	8002918 <core_bench_state+0x20>
	}
	/* run the state machine over the input */
	while (*p!=0) {
 800294a:	e017      	b.n	800297c <core_bench_state+0x84>
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
 800294c:	f107 0218 	add.w	r2, r7, #24
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f964 	bl	8002c24 <core_state_transition>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
		final_counts[fstate]++;
 8002962:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8002966:	0093      	lsls	r3, r2, #2
 8002968:	3360      	adds	r3, #96	@ 0x60
 800296a:	443b      	add	r3, r7
 800296c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002970:	1c59      	adds	r1, r3, #1
 8002972:	0093      	lsls	r3, r2, #2
 8002974:	3360      	adds	r3, #96	@ 0x60
 8002976:	443b      	add	r3, r7
 8002978:	f843 1c28 	str.w	r1, [r3, #-40]
	while (*p!=0) {
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e3      	bne.n	800294c <core_bench_state+0x54>
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* insert some corruption */
 8002988:	e010      	b.n	80029ac <core_bench_state+0xb4>
		if (*p!=',')
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b2c      	cmp	r3, #44	@ 0x2c
 8002990:	d007      	beq.n	80029a2 <core_bench_state+0xaa>
			*p^=(ee_u8)seed1;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	7819      	ldrb	r1, [r3, #0]
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	404a      	eors	r2, r1
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
		p+=step;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 80029a8:	4413      	add	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* insert some corruption */
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	441a      	add	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d8e8      	bhi.n	800298a <core_bench_state+0x92>
	}
	p=memblock;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	617b      	str	r3, [r7, #20]
	/* run the state machine over the input again */
	while (*p!=0) {
 80029bc:	e017      	b.n	80029ee <core_bench_state+0xf6>
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
 80029be:	f107 0218 	add.w	r2, r7, #24
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f92b 	bl	8002c24 <core_state_transition>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		final_counts[fstate]++;
 80029d4:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80029d8:	0093      	lsls	r3, r2, #2
 80029da:	3360      	adds	r3, #96	@ 0x60
 80029dc:	443b      	add	r3, r7
 80029de:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80029e2:	1c59      	adds	r1, r3, #1
 80029e4:	0093      	lsls	r3, r2, #2
 80029e6:	3360      	adds	r3, #96	@ 0x60
 80029e8:	443b      	add	r3, r7
 80029ea:	f843 1c28 	str.w	r1, [r3, #-40]
	while (*p!=0) {
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e3      	bne.n	80029be <core_bench_state+0xc6>
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 80029fa:	e010      	b.n	8002a1e <core_bench_state+0x126>
		if (*p!=',')
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b2c      	cmp	r3, #44	@ 0x2c
 8002a02:	d007      	beq.n	8002a14 <core_bench_state+0x11c>
			*p^=(ee_u8)seed2;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	7819      	ldrb	r1, [r3, #0]
 8002a08:	88bb      	ldrh	r3, [r7, #4]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	404a      	eors	r2, r1
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]
		p+=step;
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	441a      	add	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d8e8      	bhi.n	80029fc <core_bench_state+0x104>
	}
	/* end timing */
	for (i=0; i<NUM_CORE_STATES; i++) {
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a2e:	e020      	b.n	8002a72 <core_bench_state+0x17a>
		crc=crcu32(final_counts[i],crc);
 8002a30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	3360      	adds	r3, #96	@ 0x60
 8002a36:	443b      	add	r3, r7
 8002a38:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002a3c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fa99 	bl	8002f7a <crcu32>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		crc=crcu32(track_counts[i],crc);
 8002a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	3360      	adds	r3, #96	@ 0x60
 8002a54:	443b      	add	r3, r7
 8002a56:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002a5a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fa8a 	bl	8002f7a <crcu32>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	for (i=0; i<NUM_CORE_STATES; i++) {
 8002a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a6e:	3301      	adds	r3, #1
 8002a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a74:	2b07      	cmp	r3, #7
 8002a76:	d9db      	bls.n	8002a30 <core_bench_state+0x138>
	}
	return crc;
 8002a78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3760      	adds	r7, #96	@ 0x60
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <core_init_state>:
	Actual patterns chosen depend on the seed parameter.
	
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	@ 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	817b      	strh	r3, [r7, #10]
	ee_u32 total=0,next=0,i;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
	ee_u8 *buf=0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
#if CORE_DEBUG
	ee_u8 *start=p;
	ee_printf("State: %d,%d\n",size,seed);
#endif
	size--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
	next=0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
	while ((total+next+1)<size) {
 8002aa8:	e079      	b.n	8002b9e <core_init_state+0x11a>
		if (next>0) {
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01f      	beq.n	8002af0 <core_init_state+0x6c>
			for(i=0;i<next;i++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e00c      	b.n	8002ad0 <core_init_state+0x4c>
				*(p+total+i)=buf[i];
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	441a      	add	r2, r3
 8002abc:	69f9      	ldr	r1, [r7, #28]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	440b      	add	r3, r1
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	440b      	add	r3, r1
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	701a      	strb	r2, [r3, #0]
			for(i=0;i<next;i++)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d3ee      	bcc.n	8002ab6 <core_init_state+0x32>
			*(p+total+i)=',';
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4413      	add	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	222c      	movs	r2, #44	@ 0x2c
 8002ae4:	701a      	strb	r2, [r3, #0]
			total+=next+1;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
		}
		seed++;
 8002af0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	817b      	strh	r3, [r7, #10]
		switch (seed & 0x7) {
 8002afc:	897b      	ldrh	r3, [r7, #10]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	2b07      	cmp	r3, #7
 8002b04:	d84a      	bhi.n	8002b9c <core_init_state+0x118>
 8002b06:	a201      	add	r2, pc, #4	@ (adr r2, 8002b0c <core_init_state+0x88>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002b2d 	.word	0x08002b2d
 8002b10:	08002b2d 	.word	0x08002b2d
 8002b14:	08002b2d 	.word	0x08002b2d
 8002b18:	08002b49 	.word	0x08002b49
 8002b1c:	08002b49 	.word	0x08002b49
 8002b20:	08002b65 	.word	0x08002b65
 8002b24:	08002b65 	.word	0x08002b65
 8002b28:	08002b81 	.word	0x08002b81
			case 0: /* int */
			case 1: /* int */
			case 2: /* int */
				buf=intpat[(seed>>3) & 0x3];
 8002b2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b30:	10db      	asrs	r3, r3, #3
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	4a28      	ldr	r2, [pc, #160]	@ (8002bdc <core_init_state+0x158>)
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	613b      	str	r3, [r7, #16]
				next=4;
 8002b42:	2304      	movs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
			break;
 8002b46:	e02a      	b.n	8002b9e <core_init_state+0x11a>
			case 3: /* float */
			case 4: /* float */
				buf=floatpat[(seed>>3) & 0x3];
 8002b48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b4c:	10db      	asrs	r3, r3, #3
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	4a22      	ldr	r2, [pc, #136]	@ (8002be0 <core_init_state+0x15c>)
 8002b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5c:	613b      	str	r3, [r7, #16]
				next=8;
 8002b5e:	2308      	movs	r3, #8
 8002b60:	61bb      	str	r3, [r7, #24]
			break;
 8002b62:	e01c      	b.n	8002b9e <core_init_state+0x11a>
			case 5: /* scientific */
			case 6: /* scientific */
				buf=scipat[(seed>>3) & 0x3];
 8002b64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b68:	10db      	asrs	r3, r3, #3
 8002b6a:	b21b      	sxth	r3, r3
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	4a1c      	ldr	r2, [pc, #112]	@ (8002be4 <core_init_state+0x160>)
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	613b      	str	r3, [r7, #16]
				next=8;
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	61bb      	str	r3, [r7, #24]
			break;
 8002b7e:	e00e      	b.n	8002b9e <core_init_state+0x11a>
			case 7: /* invalid */
				buf=errpat[(seed>>3) & 0x3];
 8002b80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b84:	10db      	asrs	r3, r3, #3
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	4a16      	ldr	r2, [pc, #88]	@ (8002be8 <core_init_state+0x164>)
 8002b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b94:	613b      	str	r3, [r7, #16]
				next=8;
 8002b96:	2308      	movs	r3, #8
 8002b98:	61bb      	str	r3, [r7, #24]
			break;
 8002b9a:	e000      	b.n	8002b9e <core_init_state+0x11a>
			default: /* Never happen, just to make some compilers happy */
			break;
 8002b9c:	bf00      	nop
	while ((total+next+1)<size) {
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	f63f af7e 	bhi.w	8002aaa <core_init_state+0x26>
		}
	}
	size++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
	while (total<size) { /* fill the rest with 0 */
 8002bb4:	e007      	b.n	8002bc6 <core_init_state+0x142>
		*(p+total)=0;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	4413      	add	r3, r2
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
		total++;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
	while (total<size) { /* fill the rest with 0 */
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d3f3      	bcc.n	8002bb6 <core_init_state+0x132>
	}
#if CORE_DEBUG
	ee_printf("State Input: %s\n",start);
#endif
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	3724      	adds	r7, #36	@ 0x24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	20000030 	.word	0x20000030
 8002be0:	20000040 	.word	0x20000040
 8002be4:	20000050 	.word	0x20000050
 8002be8:	20000060 	.word	0x20000060

08002bec <ee_isdigit>:

static ee_u8 ee_isdigit(ee_u8 c) {
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b2f      	cmp	r3, #47	@ 0x2f
 8002bfa:	bf8c      	ite	hi
 8002bfc:	2301      	movhi	r3, #1
 8002bfe:	2300      	movls	r3, #0
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b39      	cmp	r3, #57	@ 0x39
 8002c06:	bf94      	ite	ls
 8002c08:	2301      	movls	r3, #1
 8002c0a:	2300      	movhi	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	73fb      	strb	r3, [r7, #15]
	return retval;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <core_state_transition>:
	2 - a valid number has been detected.
	
	The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
	ee_u8 *str=*instr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
 8002c34:	2300      	movs	r3, #0
 8002c36:	72fb      	strb	r3, [r7, #11]
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002c38:	e0e5      	b.n	8002e06 <core_state_transition+0x1e2>
		NEXT_SYMBOL = *str;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	72bb      	strb	r3, [r7, #10]
		if (NEXT_SYMBOL==',') /* end of this input */ {
 8002c40:	7abb      	ldrb	r3, [r7, #10]
 8002c42:	2b2c      	cmp	r3, #44	@ 0x2c
 8002c44:	d103      	bne.n	8002c4e <core_state_transition+0x2a>
			str++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
			break;
 8002c4c:	e0e3      	b.n	8002e16 <core_state_transition+0x1f2>
		}
		switch(state) {
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
 8002c50:	2b07      	cmp	r3, #7
 8002c52:	f200 80ce 	bhi.w	8002df2 <core_state_transition+0x1ce>
 8002c56:	a201      	add	r2, pc, #4	@ (adr r2, 8002c5c <core_state_transition+0x38>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c7d 	.word	0x08002c7d
 8002c60:	08002df3 	.word	0x08002df3
 8002c64:	08002cc9 	.word	0x08002cc9
 8002c68:	08002d7b 	.word	0x08002d7b
 8002c6c:	08002d0d 	.word	0x08002d0d
 8002c70:	08002d41 	.word	0x08002d41
 8002c74:	08002da7 	.word	0x08002da7
 8002c78:	08002dd5 	.word	0x08002dd5
		case CORE_START:
			if(ee_isdigit(NEXT_SYMBOL)) {
 8002c7c:	7abb      	ldrb	r3, [r7, #10]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ffb4 	bl	8002bec <ee_isdigit>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <core_state_transition+0x6c>
				state = CORE_INT;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	72fb      	strb	r3, [r7, #11]
 8002c8e:	e015      	b.n	8002cbc <core_state_transition+0x98>
			}
			else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
 8002c90:	7abb      	ldrb	r3, [r7, #10]
 8002c92:	2b2b      	cmp	r3, #43	@ 0x2b
 8002c94:	d002      	beq.n	8002c9c <core_state_transition+0x78>
 8002c96:	7abb      	ldrb	r3, [r7, #10]
 8002c98:	2b2d      	cmp	r3, #45	@ 0x2d
 8002c9a:	d102      	bne.n	8002ca2 <core_state_transition+0x7e>
				state = CORE_S1;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	72fb      	strb	r3, [r7, #11]
 8002ca0:	e00c      	b.n	8002cbc <core_state_transition+0x98>
			}
			else if( NEXT_SYMBOL == '.' ) {
 8002ca2:	7abb      	ldrb	r3, [r7, #10]
 8002ca4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ca6:	d102      	bne.n	8002cae <core_state_transition+0x8a>
				state = CORE_FLOAT;
 8002ca8:	2305      	movs	r3, #5
 8002caa:	72fb      	strb	r3, [r7, #11]
 8002cac:	e006      	b.n	8002cbc <core_state_transition+0x98>
			}
			else {
				state = CORE_INVALID;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INVALID]++;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	3201      	adds	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
			}
			transition_count[CORE_START]++;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	601a      	str	r2, [r3, #0]
			break;
 8002cc6:	e09b      	b.n	8002e00 <core_state_transition+0x1dc>
		case CORE_S1:
			if(ee_isdigit(NEXT_SYMBOL)) {
 8002cc8:	7abb      	ldrb	r3, [r7, #10]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ff8e 	bl	8002bec <ee_isdigit>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <core_state_transition+0xc2>
				state = CORE_INT;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S1]++;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	3308      	adds	r3, #8
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	3201      	adds	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_S1]++;
			}
			break;
 8002ce4:	e08c      	b.n	8002e00 <core_state_transition+0x1dc>
			else if( NEXT_SYMBOL == '.' ) {
 8002ce6:	7abb      	ldrb	r3, [r7, #10]
 8002ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cea:	d107      	bne.n	8002cfc <core_state_transition+0xd8>
				state = CORE_FLOAT;
 8002cec:	2305      	movs	r3, #5
 8002cee:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S1]++;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	3201      	adds	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
			break;
 8002cfa:	e081      	b.n	8002e00 <core_state_transition+0x1dc>
				state = CORE_INVALID;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S1]++;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3308      	adds	r3, #8
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	3201      	adds	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
			break;
 8002d0a:	e079      	b.n	8002e00 <core_state_transition+0x1dc>
		case CORE_INT:
			if( NEXT_SYMBOL == '.' ) {
 8002d0c:	7abb      	ldrb	r3, [r7, #10]
 8002d0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d10:	d107      	bne.n	8002d22 <core_state_transition+0xfe>
				state = CORE_FLOAT;
 8002d12:	2305      	movs	r3, #5
 8002d14:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INT]++;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3310      	adds	r3, #16
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	3201      	adds	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_INT]++;
			}
			break;
 8002d20:	e069      	b.n	8002df6 <core_state_transition+0x1d2>
			else if(!ee_isdigit(NEXT_SYMBOL)) {
 8002d22:	7abb      	ldrb	r3, [r7, #10]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff61 	bl	8002bec <ee_isdigit>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d162      	bne.n	8002df6 <core_state_transition+0x1d2>
				state = CORE_INVALID;
 8002d30:	2301      	movs	r3, #1
 8002d32:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INT]++;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	3310      	adds	r3, #16
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	3201      	adds	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
			break;
 8002d3e:	e05a      	b.n	8002df6 <core_state_transition+0x1d2>
		case CORE_FLOAT:
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
 8002d40:	7abb      	ldrb	r3, [r7, #10]
 8002d42:	2b45      	cmp	r3, #69	@ 0x45
 8002d44:	d002      	beq.n	8002d4c <core_state_transition+0x128>
 8002d46:	7abb      	ldrb	r3, [r7, #10]
 8002d48:	2b65      	cmp	r3, #101	@ 0x65
 8002d4a:	d107      	bne.n	8002d5c <core_state_transition+0x138>
				state = CORE_S2;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_FLOAT]++;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	3314      	adds	r3, #20
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	3201      	adds	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_FLOAT]++;
			}
			break;
 8002d5a:	e04e      	b.n	8002dfa <core_state_transition+0x1d6>
			else if(!ee_isdigit(NEXT_SYMBOL)) {
 8002d5c:	7abb      	ldrb	r3, [r7, #10]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff44 	bl	8002bec <ee_isdigit>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d147      	bne.n	8002dfa <core_state_transition+0x1d6>
				state = CORE_INVALID;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_FLOAT]++;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	3314      	adds	r3, #20
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	3201      	adds	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
			break;
 8002d78:	e03f      	b.n	8002dfa <core_state_transition+0x1d6>
		case CORE_S2:
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
 8002d7a:	7abb      	ldrb	r3, [r7, #10]
 8002d7c:	2b2b      	cmp	r3, #43	@ 0x2b
 8002d7e:	d002      	beq.n	8002d86 <core_state_transition+0x162>
 8002d80:	7abb      	ldrb	r3, [r7, #10]
 8002d82:	2b2d      	cmp	r3, #45	@ 0x2d
 8002d84:	d107      	bne.n	8002d96 <core_state_transition+0x172>
				state = CORE_EXPONENT;
 8002d86:	2306      	movs	r3, #6
 8002d88:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S2]++;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	3201      	adds	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_S2]++;
			}
			break;
 8002d94:	e034      	b.n	8002e00 <core_state_transition+0x1dc>
				state = CORE_INVALID;
 8002d96:	2301      	movs	r3, #1
 8002d98:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_S2]++;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	3201      	adds	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
			break;
 8002da4:	e02c      	b.n	8002e00 <core_state_transition+0x1dc>
		case CORE_EXPONENT:
			if(ee_isdigit(NEXT_SYMBOL)) {
 8002da6:	7abb      	ldrb	r3, [r7, #10]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff1f 	bl	8002bec <ee_isdigit>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <core_state_transition+0x1a0>
				state = CORE_SCIENTIFIC;
 8002db4:	2307      	movs	r3, #7
 8002db6:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_EXPONENT]++;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	3318      	adds	r3, #24
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	3201      	adds	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_EXPONENT]++;
			}
			break;
 8002dc2:	e01d      	b.n	8002e00 <core_state_transition+0x1dc>
				state = CORE_INVALID;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_EXPONENT]++;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	3201      	adds	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
			break;
 8002dd2:	e015      	b.n	8002e00 <core_state_transition+0x1dc>
		case CORE_SCIENTIFIC:
			if(!ee_isdigit(NEXT_SYMBOL)) {
 8002dd4:	7abb      	ldrb	r3, [r7, #10]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ff08 	bl	8002bec <ee_isdigit>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <core_state_transition+0x1da>
				state = CORE_INVALID;
 8002de2:	2301      	movs	r3, #1
 8002de4:	72fb      	strb	r3, [r7, #11]
				transition_count[CORE_INVALID]++;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	3304      	adds	r3, #4
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	3201      	adds	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
			}
			break;
 8002df0:	e005      	b.n	8002dfe <core_state_transition+0x1da>
		default:
			break;
 8002df2:	bf00      	nop
 8002df4:	e004      	b.n	8002e00 <core_state_transition+0x1dc>
			break;
 8002df6:	bf00      	nop
 8002df8:	e002      	b.n	8002e00 <core_state_transition+0x1dc>
			break;
 8002dfa:	bf00      	nop
 8002dfc:	e000      	b.n	8002e00 <core_state_transition+0x1dc>
			break;
 8002dfe:	bf00      	nop
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <core_state_transition+0x1f2>
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f47f af12 	bne.w	8002c3a <core_state_transition+0x16>
		}
	}
	*instr=str;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]
	return state;
 8002e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop

08002e28 <get_seed_32>:
	extern volatile ee_s32 seed1_volatile;
	extern volatile ee_s32 seed2_volatile;
	extern volatile ee_s32 seed3_volatile;
	extern volatile ee_s32 seed4_volatile;
	extern volatile ee_s32 seed5_volatile;
	ee_s32 get_seed_32(int i) {
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
		ee_s32 retval;
		switch (i) {
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d821      	bhi.n	8002e7c <get_seed_32+0x54>
 8002e38:	a201      	add	r2, pc, #4	@ (adr r2, 8002e40 <get_seed_32+0x18>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e55 	.word	0x08002e55
 8002e44:	08002e5d 	.word	0x08002e5d
 8002e48:	08002e65 	.word	0x08002e65
 8002e4c:	08002e6d 	.word	0x08002e6d
 8002e50:	08002e75 	.word	0x08002e75
			case 1:
				retval=seed1_volatile;
 8002e54:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <get_seed_32+0x68>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]
				break;
 8002e5a:	e012      	b.n	8002e82 <get_seed_32+0x5a>
			case 2:
				retval=seed2_volatile;
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e94 <get_seed_32+0x6c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
				break;
 8002e62:	e00e      	b.n	8002e82 <get_seed_32+0x5a>
			case 3:
				retval=seed3_volatile;
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <get_seed_32+0x70>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
				break;
 8002e6a:	e00a      	b.n	8002e82 <get_seed_32+0x5a>
			case 4:
				retval=seed4_volatile;
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <get_seed_32+0x74>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
				break;
 8002e72:	e006      	b.n	8002e82 <get_seed_32+0x5a>
			case 5:
				retval=seed5_volatile;
 8002e74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <get_seed_32+0x78>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
				break;
 8002e7a:	e002      	b.n	8002e82 <get_seed_32+0x5a>
			default:
				retval=0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
				break;
 8002e80:	bf00      	nop
		}
		return retval;
 8002e82:	68fb      	ldr	r3, [r7, #12]
	}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	20000874 	.word	0x20000874
 8002e94:	20000878 	.word	0x20000878
 8002e98:	20000024 	.word	0x20000024
 8002e9c:	20000028 	.word	0x20000028
 8002ea0:	2000087c 	.word	0x2000087c

08002ea4 <crcu8>:
/* Function: crc*
	Service functions to calculate 16b CRC code.

*/
ee_u16 crcu8(ee_u8 data, ee_u16 crc )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	460a      	mov	r2, r1
 8002eae:	71fb      	strb	r3, [r7, #7]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80bb      	strh	r3, [r7, #4]
	ee_u8 i=0,x16=0,carry=0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	737b      	strb	r3, [r7, #13]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < 8; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e02e      	b.n	8002f24 <crcu8+0x80>
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002ec6:	88bb      	ldrh	r3, [r7, #4]
 8002ec8:	b25a      	sxtb	r2, r3
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	4053      	eors	r3, r2
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	737b      	strb	r3, [r7, #13]
		data >>= 1;
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	71fb      	strb	r3, [r7, #7]

		if (x16 == 1)
 8002ee0:	7b7b      	ldrb	r3, [r7, #13]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d108      	bne.n	8002ef8 <crcu8+0x54>
		{
		   crc ^= 0x4002;
 8002ee6:	88bb      	ldrh	r3, [r7, #4]
 8002ee8:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8002eec:	f083 0302 	eor.w	r3, r3, #2
 8002ef0:	80bb      	strh	r3, [r7, #4]
		   carry = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73bb      	strb	r3, [r7, #14]
 8002ef6:	e001      	b.n	8002efc <crcu8+0x58>
		}
		else 
			carry = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73bb      	strb	r3, [r7, #14]
		crc >>= 1;
 8002efc:	88bb      	ldrh	r3, [r7, #4]
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	80bb      	strh	r3, [r7, #4]
		if (carry)
 8002f02:	7bbb      	ldrb	r3, [r7, #14]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <crcu8+0x72>
		   crc |= 0x8000;
 8002f08:	88bb      	ldrh	r3, [r7, #4]
 8002f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f12:	80bb      	strh	r3, [r7, #4]
 8002f14:	e003      	b.n	8002f1e <crcu8+0x7a>
		else
		   crc &= 0x7fff;
 8002f16:	88bb      	ldrh	r3, [r7, #4]
 8002f18:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f1c:	80bb      	strh	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	3301      	adds	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	2b07      	cmp	r3, #7
 8002f28:	d9cd      	bls.n	8002ec6 <crcu8+0x22>
    }
	return crc;
 8002f2a:	88bb      	ldrh	r3, [r7, #4]
} 
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <crcu16>:
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460a      	mov	r2, r1
 8002f42:	80fb      	strh	r3, [r7, #6]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80bb      	strh	r3, [r7, #4]
	crc=crcu8( (ee_u8) (newval)				,crc);
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	88ba      	ldrh	r2, [r7, #4]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ffa7 	bl	8002ea4 <crcu8>
 8002f56:	4603      	mov	r3, r0
 8002f58:	80bb      	strh	r3, [r7, #4]
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	88ba      	ldrh	r2, [r7, #4]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff9c 	bl	8002ea4 <crcu8>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	80bb      	strh	r3, [r7, #4]
	return crc;
 8002f70:	88bb      	ldrh	r3, [r7, #4]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <crcu32>:
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	807b      	strh	r3, [r7, #2]
	crc=crc16((ee_s16) newval		,crc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f811 	bl	8002fb6 <crc16>
 8002f94:	4603      	mov	r3, r0
 8002f96:	807b      	strh	r3, [r7, #2]
	crc=crc16((ee_s16) (newval>>16)	,crc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0c1b      	lsrs	r3, r3, #16
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f807 	bl	8002fb6 <crc16>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	807b      	strh	r3, [r7, #2]
	return crc;
 8002fac:	887b      	ldrh	r3, [r7, #2]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <crc16>:
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	460a      	mov	r2, r1
 8002fc0:	80fb      	strh	r3, [r7, #6]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80bb      	strh	r3, [r7, #4]
	return crcu16((ee_u16)newval, crc);
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	88ba      	ldrh	r2, [r7, #4]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ffb3 	bl	8002f38 <crcu16>
 8002fd2:	4603      	mov	r3, r0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <check_data_types>:

ee_u8 check_data_types() {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
	ee_u8 retval=0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	71fb      	strb	r3, [r7, #7]
	}
	if (sizeof(ee_ptr_int) != sizeof(int *)) {
		ee_printf("ERROR: ee_ptr_int is not a datatype that holds an int pointer!\n");
		retval++;
	}
	if (retval>0) {
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <check_data_types+0x16>
		ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
 8002fec:	4803      	ldr	r0, [pc, #12]	@ (8002ffc <check_data_types+0x20>)
 8002fee:	f001 f9d1 	bl	8004394 <ee_printf>
	}
	return retval;
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	08005c20 	.word	0x08005c20

08003000 <cvt>:
#define CVTBUFSIZE 80
static char CVTBUF[CVTBUFSIZE];

static char *
cvt(double arg, int ndigits, int *decpt, int *sign, char *buf, int eflag)
{
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b08e      	sub	sp, #56	@ 0x38
 8003004:	af00      	add	r7, sp, #0
 8003006:	ed87 0b04 	vstr	d0, [r7, #16]
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
    int    r2;
    double fi, fj;
    char * p, *p1;

    if (ndigits < 0)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	da01      	bge.n	800301c <cvt+0x1c>
        ndigits = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
    if (ndigits >= CVTBUFSIZE - 1)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003020:	dd01      	ble.n	8003026 <cvt+0x26>
        ndigits = CVTBUFSIZE - 2;
 8003022:	234e      	movs	r3, #78	@ 0x4e
 8003024:	60fb      	str	r3, [r7, #12]
    r2    = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	637b      	str	r3, [r7, #52]	@ 0x34
    *sign = 0;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
    p     = &buf[0];
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	633b      	str	r3, [r7, #48]	@ 0x30
    if (arg < 0)
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003040:	f7fd fd04 	bl	8000a4c <__aeabi_dcmplt>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <cvt+0x5c>
    {
        *sign = 1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
        arg   = -arg;
 8003050:	693c      	ldr	r4, [r7, #16]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003058:	e9c7 4504 	strd	r4, r5, [r7, #16]
    }
    arg = modf(arg, &fi);
 800305c:	f107 0320 	add.w	r3, r7, #32
 8003060:	4618      	mov	r0, r3
 8003062:	ed97 0b04 	vldr	d0, [r7, #16]
 8003066:	f002 fa95 	bl	8005594 <modf>
 800306a:	ed87 0b04 	vstr	d0, [r7, #16]
    p1  = &buf[CVTBUFSIZE];
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	3350      	adds	r3, #80	@ 0x50
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (fi != 0)
 8003074:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	f7fd fcda 	bl	8000a38 <__aeabi_dcmpeq>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d159      	bne.n	800313e <cvt+0x13e>
    {
        p1 = &buf[CVTBUFSIZE];
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	3350      	adds	r3, #80	@ 0x50
 800308e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (fi != 0)
 8003090:	e03b      	b.n	800310a <cvt+0x10a>
        {
            fj    = modf(fi / 10, &fi);
 8003092:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	4b83      	ldr	r3, [pc, #524]	@ (80032a8 <cvt+0x2a8>)
 800309c:	f7fd fb8e 	bl	80007bc <__aeabi_ddiv>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	ec43 2b17 	vmov	d7, r2, r3
 80030a8:	f107 0320 	add.w	r3, r7, #32
 80030ac:	4618      	mov	r0, r3
 80030ae:	eeb0 0a47 	vmov.f32	s0, s14
 80030b2:	eef0 0a67 	vmov.f32	s1, s15
 80030b6:	f002 fa6d 	bl	8005594 <modf>
 80030ba:	eeb0 7a40 	vmov.f32	s14, s0
 80030be:	eef0 7a60 	vmov.f32	s15, s1
 80030c2:	ed87 7b06 	vstr	d7, [r7, #24]
            *--p1 = (int)((fj + .03) * 10) + '0';
 80030c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030ca:	a375      	add	r3, pc, #468	@ (adr r3, 80032a0 <cvt+0x2a0>)
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	f7fd f894 	bl	80001fc <__adddf3>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	4b71      	ldr	r3, [pc, #452]	@ (80032a8 <cvt+0x2a8>)
 80030e2:	f7fd fa41 	bl	8000568 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fcd5 	bl	8000a9c <__aeabi_d2iz>
 80030f2:	4603      	mov	r3, r0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f8:	3a01      	subs	r2, #1
 80030fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030fc:	3330      	adds	r3, #48	@ 0x30
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003102:	701a      	strb	r2, [r3, #0]
            r2++;
 8003104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003106:	3301      	adds	r3, #1
 8003108:	637b      	str	r3, [r7, #52]	@ 0x34
        while (fi != 0)
 800310a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	f7fd fc8f 	bl	8000a38 <__aeabi_dcmpeq>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0b8      	beq.n	8003092 <cvt+0x92>
        }
        while (p1 < &buf[CVTBUFSIZE])
 8003120:	e007      	b.n	8003132 <cvt+0x132>
            *p++ = *p1++;
 8003122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003124:	1c53      	adds	r3, r2, #1
 8003126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312a:	1c59      	adds	r1, r3, #1
 800312c:	6339      	str	r1, [r7, #48]	@ 0x30
 800312e:	7812      	ldrb	r2, [r2, #0]
 8003130:	701a      	strb	r2, [r3, #0]
        while (p1 < &buf[CVTBUFSIZE])
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	3350      	adds	r3, #80	@ 0x50
 8003136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003138:	429a      	cmp	r2, r3
 800313a:	d3f2      	bcc.n	8003122 <cvt+0x122>
 800313c:	e027      	b.n	800318e <cvt+0x18e>
    }
    else if (arg > 0)
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800314a:	f7fd fc9d 	bl	8000a88 <__aeabi_dcmpgt>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01c      	beq.n	800318e <cvt+0x18e>
    {
        while ((fj = arg * 10) < 1)
 8003154:	e006      	b.n	8003164 <cvt+0x164>
        {
            arg = fj;
 8003156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            r2--;
 800315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003160:	3b01      	subs	r3, #1
 8003162:	637b      	str	r3, [r7, #52]	@ 0x34
        while ((fj = arg * 10) < 1)
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	4b4f      	ldr	r3, [pc, #316]	@ (80032a8 <cvt+0x2a8>)
 800316a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800316e:	f7fd f9fb 	bl	8000568 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800317a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	4b4a      	ldr	r3, [pc, #296]	@ (80032ac <cvt+0x2ac>)
 8003184:	f7fd fc62 	bl	8000a4c <__aeabi_dcmplt>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e3      	bne.n	8003156 <cvt+0x156>
        }
    }
    p1 = &buf[ndigits];
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	4413      	add	r3, r2
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (eflag == 0)
 8003196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <cvt+0x1a4>
        p1 += r2;
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031a0:	4413      	add	r3, r2
 80031a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *decpt = r2;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031a8:	601a      	str	r2, [r3, #0]
    if (p1 < &buf[0])
 80031aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d226      	bcs.n	8003200 <cvt+0x200>
    {
        buf[0] = '\0';
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
        return buf;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	e06c      	b.n	8003296 <cvt+0x296>
    }
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    {
        arg *= 10;
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	4b39      	ldr	r3, [pc, #228]	@ (80032a8 <cvt+0x2a8>)
 80031c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031c6:	f7fd f9cf 	bl	8000568 <__aeabi_dmul>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
        arg  = modf(arg, &fj);
 80031d2:	f107 0318 	add.w	r3, r7, #24
 80031d6:	4618      	mov	r0, r3
 80031d8:	ed97 0b04 	vldr	d0, [r7, #16]
 80031dc:	f002 f9da 	bl	8005594 <modf>
 80031e0:	ed87 0b04 	vstr	d0, [r7, #16]
        *p++ = (int)fj + '0';
 80031e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fc56 	bl	8000a9c <__aeabi_d2iz>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	1c59      	adds	r1, r3, #1
 80031f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80031fa:	3230      	adds	r2, #48	@ 0x30
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]
    while (p <= p1 && p < &buf[CVTBUFSIZE])
 8003200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003204:	429a      	cmp	r2, r3
 8003206:	d804      	bhi.n	8003212 <cvt+0x212>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	3350      	adds	r3, #80	@ 0x50
 800320c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800320e:	429a      	cmp	r2, r3
 8003210:	d3d4      	bcc.n	80031bc <cvt+0x1bc>
    }
    if (p1 >= &buf[CVTBUFSIZE])
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	3350      	adds	r3, #80	@ 0x50
 8003216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003218:	429a      	cmp	r2, r3
 800321a:	d305      	bcc.n	8003228 <cvt+0x228>
    {
        buf[CVTBUFSIZE - 1] = '\0';
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	334f      	adds	r3, #79	@ 0x4f
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
        return buf;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	e036      	b.n	8003296 <cvt+0x296>
    }
    p = p1;
 8003228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322a:	633b      	str	r3, [r7, #48]	@ 0x30
    *p1 += 5;
 800322c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	3305      	adds	r3, #5
 8003232:	b2da      	uxtb	r2, r3
 8003234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003236:	701a      	strb	r2, [r3, #0]
    while (*p1 > '9')
 8003238:	e025      	b.n	8003286 <cvt+0x286>
    {
        *p1 = '0';
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323c:	2230      	movs	r2, #48	@ 0x30
 800323e:	701a      	strb	r2, [r3, #0]
        if (p1 > buf)
 8003240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d909      	bls.n	800325c <cvt+0x25c>
            ++*--p1;
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	3b01      	subs	r3, #1
 800324c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800324e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	b2da      	uxtb	r2, r3
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e014      	b.n	8003286 <cvt+0x286>
        else
        {
            *p1 = '1';
 800325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325e:	2231      	movs	r2, #49	@ 0x31
 8003260:	701a      	strb	r2, [r3, #0]
            (*decpt)++;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	601a      	str	r2, [r3, #0]
            if (eflag == 0)
 800326c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <cvt+0x286>
            {
                if (p > buf)
 8003272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d902      	bls.n	8003280 <cvt+0x280>
                    *p = '0';
 800327a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327c:	2230      	movs	r2, #48	@ 0x30
 800327e:	701a      	strb	r2, [r3, #0]
                p++;
 8003280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003282:	3301      	adds	r3, #1
 8003284:	633b      	str	r3, [r7, #48]	@ 0x30
    while (*p1 > '9')
 8003286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b39      	cmp	r3, #57	@ 0x39
 800328c:	d8d5      	bhi.n	800323a <cvt+0x23a>
            }
        }
    }
    *p = '\0';
 800328e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
    return buf;
 8003294:	683b      	ldr	r3, [r7, #0]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3738      	adds	r7, #56	@ 0x38
 800329a:	46bd      	mov	sp, r7
 800329c:	bdb0      	pop	{r4, r5, r7, pc}
 800329e:	bf00      	nop
 80032a0:	eb851eb8 	.word	0xeb851eb8
 80032a4:	3f9eb851 	.word	0x3f9eb851
 80032a8:	40240000 	.word	0x40240000
 80032ac:	3ff00000 	.word	0x3ff00000

080032b0 <ecvtbuf>:
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
}

char *
ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	ed87 0b04 	vstr	d0, [r7, #16]
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
    return cvt(arg, ndigits, decpt, sign, buf, 1);
 80032c2:	2301      	movs	r3, #1
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	ed97 0b04 	vldr	d0, [r7, #16]
 80032d2:	f7ff fe95 	bl	8003000 <cvt>
 80032d6:	4603      	mov	r3, r0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <fcvtbuf>:
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
}

char *
fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	ed87 0b04 	vstr	d0, [r7, #16]
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
    return cvt(arg, ndigits, decpt, sign, buf, 0);
 80032f2:	2300      	movs	r3, #0
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	ed97 0b04 	vldr	d0, [r7, #16]
 8003302:	f7ff fe7d 	bl	8003000 <cvt>
 8003306:	4603      	mov	r3, r0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <strnlen>:
static char *digits = "0123456789abcdefghijklmnopqrstuvwxyz";
static char *upper_digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
static ee_size_t strnlen(const char *s, ee_size_t count);

static ee_size_t strnlen(const char *s, ee_size_t count)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  const char *sc;
  for (sc = s; *sc != '\0' && count--; ++sc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e002      	b.n	8003326 <strnlen+0x16>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <strnlen+0x28>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	1e5a      	subs	r2, r3, #1
 8003332:	603a      	str	r2, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f3      	bne.n	8003320 <strnlen+0x10>
  return sc - s;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	1ad3      	subs	r3, r2, r3
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <skip_atoi>:

static int skip_atoi(const char **s)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  int i = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8003356:	e00e      	b.n	8003376 <skip_atoi+0x2c>
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4618      	mov	r0, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	1c59      	adds	r1, r3, #1
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6011      	str	r1, [r2, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	4403      	add	r3, r0
 8003372:	3b30      	subs	r3, #48	@ 0x30
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b2f      	cmp	r3, #47	@ 0x2f
 800337e:	d904      	bls.n	800338a <skip_atoi+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b39      	cmp	r3, #57	@ 0x39
 8003388:	d9e6      	bls.n	8003358 <skip_atoi+0xe>
  return i;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <number>:

static char *number(char *str, long num, int base, int size, int precision, int type)
{
 8003398:	b480      	push	{r7}
 800339a:	b099      	sub	sp, #100	@ 0x64
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  char c, sign, tmp[66];
  char *dig = digits;
 80033a6:	4b85      	ldr	r3, [pc, #532]	@ (80035bc <number+0x224>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80033ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <number+0x24>
 80033b6:	4b82      	ldr	r3, [pc, #520]	@ (80035c0 <number+0x228>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (type & LEFT) type &= ~ZEROPAD;
 80033bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <number+0x36>
 80033c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (base < 2 || base > 36) return 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	dd02      	ble.n	80033da <number+0x42>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b24      	cmp	r3, #36	@ 0x24
 80033d8:	dd01      	ble.n	80033de <number+0x46>
 80033da:	2300      	movs	r3, #0
 80033dc:	e0e8      	b.n	80035b0 <number+0x218>

  c = (type & ZEROPAD) ? '0' : ' ';
 80033de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <number+0x54>
 80033e8:	2330      	movs	r3, #48	@ 0x30
 80033ea:	e000      	b.n	80033ee <number+0x56>
 80033ec:	2320      	movs	r3, #32
 80033ee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 80033f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d023      	beq.n	800344a <number+0xb2>
  {
    if (num < 0)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	da09      	bge.n	800341c <number+0x84>
    {
      sign = '-';
 8003408:	232d      	movs	r3, #45	@ 0x2d
 800340a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	425b      	negs	r3, r3
 8003412:	60bb      	str	r3, [r7, #8]
      size--;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	3b01      	subs	r3, #1
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	e016      	b.n	800344a <number+0xb2>
    }
    else if (type & PLUS)
 800341c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <number+0x9c>
    {
      sign = '+';
 8003426:	232b      	movs	r3, #43	@ 0x2b
 8003428:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      size--;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	e00a      	b.n	800344a <number+0xb2>
    }
    else if (type & SPACE)
 8003434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <number+0xb2>
    {
      sign = ' ';
 800343e:	2320      	movs	r3, #32
 8003440:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      size--;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	3b01      	subs	r3, #1
 8003448:	603b      	str	r3, [r7, #0]
    }
  }

  if (type & HEX_PREP)
 800344a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00c      	beq.n	800346e <number+0xd6>
  {
    if (base == 16)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b10      	cmp	r3, #16
 8003458:	d103      	bne.n	8003462 <number+0xca>
      size -= 2;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	3b02      	subs	r3, #2
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	e005      	b.n	800346e <number+0xd6>
    else if (base == 8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d102      	bne.n	800346e <number+0xd6>
      size--;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	3b01      	subs	r3, #1
 800346c:	603b      	str	r3, [r7, #0]
  }

  i = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11e      	bne.n	80034b6 <number+0x11e>
    tmp[i++] = '0';
 8003478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	657a      	str	r2, [r7, #84]	@ 0x54
 800347e:	3360      	adds	r3, #96	@ 0x60
 8003480:	443b      	add	r3, r7
 8003482:	2230      	movs	r2, #48	@ 0x30
 8003484:	f803 2c50 	strb.w	r2, [r3, #-80]
 8003488:	e018      	b.n	80034bc <number+0x124>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003492:	fb01 f202 	mul.w	r2, r1, r2
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800349a:	441a      	add	r2, r3
 800349c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349e:	1c59      	adds	r1, r3, #1
 80034a0:	6579      	str	r1, [r7, #84]	@ 0x54
 80034a2:	7812      	ldrb	r2, [r2, #0]
 80034a4:	3360      	adds	r3, #96	@ 0x60
 80034a6:	443b      	add	r3, r7
 80034a8:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	60bb      	str	r3, [r7, #8]
    while (num != 0)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e6      	bne.n	800348a <number+0xf2>
    }
  }

  if (i > precision) precision = i;
 80034bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034c0:	429a      	cmp	r2, r3
 80034c2:	dd01      	ble.n	80034c8 <number+0x130>
 80034c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  size -= precision;
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	603b      	str	r3, [r7, #0]
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
 80034d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d2:	f003 0311 	and.w	r3, r3, #17
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <number+0x158>
 80034da:	e004      	b.n	80034e6 <number+0x14e>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	60fa      	str	r2, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	1e5a      	subs	r2, r3, #1
 80034ea:	603a      	str	r2, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	dcf5      	bgt.n	80034dc <number+0x144>
  if (sign) *str++ = sign;
 80034f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <number+0x16c>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	60fa      	str	r2, [r7, #12]
 80034fe:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8003502:	701a      	strb	r2, [r3, #0]

  if (type & HEX_PREP)
 8003504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <number+0x1a8>
  {
    if (base == 8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b08      	cmp	r3, #8
 8003512:	d105      	bne.n	8003520 <number+0x188>
      *str++ = '0';
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	60fa      	str	r2, [r7, #12]
 800351a:	2230      	movs	r2, #48	@ 0x30
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e00f      	b.n	8003540 <number+0x1a8>
    else if (base == 16)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b10      	cmp	r3, #16
 8003524:	d10c      	bne.n	8003540 <number+0x1a8>
    {
      *str++ = '0';
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	60fa      	str	r2, [r7, #12]
 800352c:	2230      	movs	r2, #48	@ 0x30
 800352e:	701a      	strb	r2, [r3, #0]
      *str++ = digits[33];
 8003530:	4b22      	ldr	r3, [pc, #136]	@ (80035bc <number+0x224>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1c59      	adds	r1, r3, #1
 8003538:	60f9      	str	r1, [r7, #12]
 800353a:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 800353e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
 8003540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	d111      	bne.n	800356e <number+0x1d6>
 800354a:	e005      	b.n	8003558 <number+0x1c0>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	60fa      	str	r2, [r7, #12]
 8003552:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	1e5a      	subs	r2, r3, #1
 800355c:	603a      	str	r2, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	dcf4      	bgt.n	800354c <number+0x1b4>
  while (i < precision--) *str++ = '0';
 8003562:	e004      	b.n	800356e <number+0x1d6>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	60fa      	str	r2, [r7, #12]
 800356a:	2230      	movs	r2, #48	@ 0x30
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003570:	1e5a      	subs	r2, r3, #1
 8003572:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003574:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003576:	429a      	cmp	r2, r3
 8003578:	dbf4      	blt.n	8003564 <number+0x1cc>
  while (i-- > 0) *str++ = tmp[i];
 800357a:	e008      	b.n	800358e <number+0x1f6>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	60fa      	str	r2, [r7, #12]
 8003582:	f107 0110 	add.w	r1, r7, #16
 8003586:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003588:	440a      	add	r2, r1
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003590:	1e5a      	subs	r2, r3, #1
 8003592:	657a      	str	r2, [r7, #84]	@ 0x54
 8003594:	2b00      	cmp	r3, #0
 8003596:	dcf1      	bgt.n	800357c <number+0x1e4>
  while (size-- > 0) *str++ = ' ';
 8003598:	e004      	b.n	80035a4 <number+0x20c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	60fa      	str	r2, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	1e5a      	subs	r2, r3, #1
 80035a8:	603a      	str	r2, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	dcf5      	bgt.n	800359a <number+0x202>

  return str;
 80035ae:	68fb      	ldr	r3, [r7, #12]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3764      	adds	r7, #100	@ 0x64
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	20000070 	.word	0x20000070
 80035c0:	20000074 	.word	0x20000074

080035c4 <eaddr>:

static char *eaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b08f      	sub	sp, #60	@ 0x3c
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  char tmp[24];
  char *dig = digits;
 80035d2:	4b3c      	ldr	r3, [pc, #240]	@ (80036c4 <eaddr+0x100>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	637b      	str	r3, [r7, #52]	@ 0x34
  int i, len;

  if (type & UPPERCASE)  dig = upper_digits;
 80035d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <eaddr+0x24>
 80035e2:	4b39      	ldr	r3, [pc, #228]	@ (80036c8 <eaddr+0x104>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	637b      	str	r3, [r7, #52]	@ 0x34
  len = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (i = 0; i < 6; i++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80035f0:	e02e      	b.n	8003650 <eaddr+0x8c>
  {
    if (i != 0) tmp[len++] = ':';
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <eaddr+0x44>
 80035f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fe:	3338      	adds	r3, #56	@ 0x38
 8003600:	443b      	add	r3, r7
 8003602:	223a      	movs	r2, #58	@ 0x3a
 8003604:	f803 2c24 	strb.w	r2, [r3, #-36]
    tmp[len++] = dig[addr[i] >> 4];
 8003608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4413      	add	r3, r2
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003618:	441a      	add	r2, r3
 800361a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361c:	1c59      	adds	r1, r3, #1
 800361e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	3338      	adds	r3, #56	@ 0x38
 8003624:	443b      	add	r3, r7
 8003626:	f803 2c24 	strb.w	r2, [r3, #-36]
    tmp[len++] = dig[addr[i] & 0x0F];
 800362a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	4413      	add	r3, r2
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003638:	441a      	add	r2, r3
 800363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363c:	1c59      	adds	r1, r3, #1
 800363e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003640:	7812      	ldrb	r2, [r2, #0]
 8003642:	3338      	adds	r3, #56	@ 0x38
 8003644:	443b      	add	r3, r7
 8003646:	f803 2c24 	strb.w	r2, [r3, #-36]
  for (i = 0; i < 6; i++)
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	3301      	adds	r3, #1
 800364e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	2b05      	cmp	r3, #5
 8003654:	ddcd      	ble.n	80035f2 <eaddr+0x2e>
  }

  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
 8003656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <eaddr+0xb4>
 8003660:	e004      	b.n	800366c <eaddr+0xa8>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	60fa      	str	r2, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1e5a      	subs	r2, r3, #1
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003674:	429a      	cmp	r2, r3
 8003676:	dbf4      	blt.n	8003662 <eaddr+0x9e>
  for (i = 0; i < len; ++i) *str++ = tmp[i];
 8003678:	2300      	movs	r3, #0
 800367a:	633b      	str	r3, [r7, #48]	@ 0x30
 800367c:	e00b      	b.n	8003696 <eaddr+0xd2>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	60fa      	str	r2, [r7, #12]
 8003684:	f107 0114 	add.w	r1, r7, #20
 8003688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800368a:	440a      	add	r2, r1
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	3301      	adds	r3, #1
 8003694:	633b      	str	r3, [r7, #48]	@ 0x30
 8003696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369a:	429a      	cmp	r2, r3
 800369c:	dbef      	blt.n	800367e <eaddr+0xba>
  while (len < size--) *str++ = ' ';
 800369e:	e004      	b.n	80036aa <eaddr+0xe6>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	60fa      	str	r2, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b2:	429a      	cmp	r2, r3
 80036b4:	dbf4      	blt.n	80036a0 <eaddr+0xdc>

  return str;
 80036b6:	68fb      	ldr	r3, [r7, #12]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	373c      	adds	r7, #60	@ 0x3c
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	20000070 	.word	0x20000070
 80036c8:	20000074 	.word	0x20000074

080036cc <iaddr>:

static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b08f      	sub	sp, #60	@ 0x3c
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  char tmp[24];
  int i, n, len;

  len = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (i = 0; i < 4; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e2:	e08f      	b.n	8003804 <iaddr+0x138>
  {
    if (i != 0) tmp[len++] = '.';
 80036e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <iaddr+0x2e>
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036f0:	3338      	adds	r3, #56	@ 0x38
 80036f2:	443b      	add	r3, r7
 80036f4:	222e      	movs	r2, #46	@ 0x2e
 80036f6:	f803 2c24 	strb.w	r2, [r3, #-36]
    n = addr[i];
 80036fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	633b      	str	r3, [r7, #48]	@ 0x30

    if (n == 0)
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <iaddr+0x54>
      tmp[len++] = digits[0];
 800370a:	4b5c      	ldr	r3, [pc, #368]	@ (800387c <iaddr+0x1b0>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003710:	1c59      	adds	r1, r3, #1
 8003712:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	3338      	adds	r3, #56	@ 0x38
 8003718:	443b      	add	r3, r7
 800371a:	f803 2c24 	strb.w	r2, [r3, #-36]
 800371e:	e06e      	b.n	80037fe <iaddr+0x132>
    else
    {
      if (n >= 100)
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003722:	2b63      	cmp	r3, #99	@ 0x63
 8003724:	dd3d      	ble.n	80037a2 <iaddr+0xd6>
      {
        tmp[len++] = digits[n / 100];
 8003726:	4b55      	ldr	r3, [pc, #340]	@ (800387c <iaddr+0x1b0>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	4954      	ldr	r1, [pc, #336]	@ (8003880 <iaddr+0x1b4>)
 800372e:	fb81 0103 	smull	r0, r1, r1, r3
 8003732:	1149      	asrs	r1, r1, #5
 8003734:	17db      	asrs	r3, r3, #31
 8003736:	1acb      	subs	r3, r1, r3
 8003738:	441a      	add	r2, r3
 800373a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373c:	1c59      	adds	r1, r3, #1
 800373e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	3338      	adds	r3, #56	@ 0x38
 8003744:	443b      	add	r3, r7
 8003746:	f803 2c24 	strb.w	r2, [r3, #-36]
        n = n % 100;
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	4a4c      	ldr	r2, [pc, #304]	@ (8003880 <iaddr+0x1b4>)
 800374e:	fb82 1203 	smull	r1, r2, r2, r3
 8003752:	1151      	asrs	r1, r2, #5
 8003754:	17da      	asrs	r2, r3, #31
 8003756:	1a8a      	subs	r2, r1, r2
 8003758:	2164      	movs	r1, #100	@ 0x64
 800375a:	fb01 f202 	mul.w	r2, r1, r2
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	633b      	str	r3, [r7, #48]	@ 0x30
        tmp[len++] = digits[n / 10];
 8003762:	4b46      	ldr	r3, [pc, #280]	@ (800387c <iaddr+0x1b0>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	4946      	ldr	r1, [pc, #280]	@ (8003884 <iaddr+0x1b8>)
 800376a:	fb81 0103 	smull	r0, r1, r1, r3
 800376e:	1089      	asrs	r1, r1, #2
 8003770:	17db      	asrs	r3, r3, #31
 8003772:	1acb      	subs	r3, r1, r3
 8003774:	441a      	add	r2, r3
 8003776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003778:	1c59      	adds	r1, r3, #1
 800377a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	3338      	adds	r3, #56	@ 0x38
 8003780:	443b      	add	r3, r7
 8003782:	f803 2c24 	strb.w	r2, [r3, #-36]
        n = n % 10;
 8003786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003788:	4b3e      	ldr	r3, [pc, #248]	@ (8003884 <iaddr+0x1b8>)
 800378a:	fb83 1302 	smull	r1, r3, r3, r2
 800378e:	1099      	asrs	r1, r3, #2
 8003790:	17d3      	asrs	r3, r2, #31
 8003792:	1ac9      	subs	r1, r1, r3
 8003794:	460b      	mov	r3, r1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	633b      	str	r3, [r7, #48]	@ 0x30
 80037a0:	e021      	b.n	80037e6 <iaddr+0x11a>
      }
      else if (n >= 10)
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	2b09      	cmp	r3, #9
 80037a6:	dd1e      	ble.n	80037e6 <iaddr+0x11a>
      {
        tmp[len++] = digits[n / 10];
 80037a8:	4b34      	ldr	r3, [pc, #208]	@ (800387c <iaddr+0x1b0>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	4935      	ldr	r1, [pc, #212]	@ (8003884 <iaddr+0x1b8>)
 80037b0:	fb81 0103 	smull	r0, r1, r1, r3
 80037b4:	1089      	asrs	r1, r1, #2
 80037b6:	17db      	asrs	r3, r3, #31
 80037b8:	1acb      	subs	r3, r1, r3
 80037ba:	441a      	add	r2, r3
 80037bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037be:	1c59      	adds	r1, r3, #1
 80037c0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	3338      	adds	r3, #56	@ 0x38
 80037c6:	443b      	add	r3, r7
 80037c8:	f803 2c24 	strb.w	r2, [r3, #-36]
        n = n % 10;
 80037cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <iaddr+0x1b8>)
 80037d0:	fb83 1302 	smull	r1, r3, r3, r2
 80037d4:	1099      	asrs	r1, r3, #2
 80037d6:	17d3      	asrs	r3, r2, #31
 80037d8:	1ac9      	subs	r1, r1, r3
 80037da:	460b      	mov	r3, r1
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      tmp[len++] = digits[n];
 80037e6:	4b25      	ldr	r3, [pc, #148]	@ (800387c <iaddr+0x1b0>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	441a      	add	r2, r3
 80037ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f0:	1c59      	adds	r1, r3, #1
 80037f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80037f4:	7812      	ldrb	r2, [r2, #0]
 80037f6:	3338      	adds	r3, #56	@ 0x38
 80037f8:	443b      	add	r3, r7
 80037fa:	f803 2c24 	strb.w	r2, [r3, #-36]
  for (i = 0; i < 4; i++)
 80037fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003800:	3301      	adds	r3, #1
 8003802:	637b      	str	r3, [r7, #52]	@ 0x34
 8003804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003806:	2b03      	cmp	r3, #3
 8003808:	f77f af6c 	ble.w	80036e4 <iaddr+0x18>
    }
  }

  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
 800380c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <iaddr+0x162>
 8003816:	e004      	b.n	8003822 <iaddr+0x156>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	60fa      	str	r2, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	1e5a      	subs	r2, r3, #1
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800382a:	429a      	cmp	r2, r3
 800382c:	dbf4      	blt.n	8003818 <iaddr+0x14c>
  for (i = 0; i < len; ++i) *str++ = tmp[i];
 800382e:	2300      	movs	r3, #0
 8003830:	637b      	str	r3, [r7, #52]	@ 0x34
 8003832:	e00b      	b.n	800384c <iaddr+0x180>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	60fa      	str	r2, [r7, #12]
 800383a:	f107 0114 	add.w	r1, r7, #20
 800383e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003840:	440a      	add	r2, r1
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003848:	3301      	adds	r3, #1
 800384a:	637b      	str	r3, [r7, #52]	@ 0x34
 800384c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	429a      	cmp	r2, r3
 8003852:	dbef      	blt.n	8003834 <iaddr+0x168>
  while (len < size--) *str++ = ' ';
 8003854:	e004      	b.n	8003860 <iaddr+0x194>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	60fa      	str	r2, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	1e5a      	subs	r2, r3, #1
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003868:	429a      	cmp	r2, r3
 800386a:	dbf4      	blt.n	8003856 <iaddr+0x18a>

  return str;
 800386c:	68fb      	ldr	r3, [r7, #12]
}
 800386e:	4618      	mov	r0, r3
 8003870:	373c      	adds	r7, #60	@ 0x3c
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000070 	.word	0x20000070
 8003880:	51eb851f 	.word	0x51eb851f
 8003884:	66666667 	.word	0x66666667

08003888 <ee_bufcpy>:

char *ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf);
char *fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf);
static void ee_bufcpy(char *d, char *s, int count);

void ee_bufcpy(char *pd, char *ps, int count) {
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
	char *pe=ps+count;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	4413      	add	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
	while (ps!=pe)
 800389c:	e007      	b.n	80038ae <ee_bufcpy+0x26>
		*pd++=*ps++;
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	1c53      	adds	r3, r2, #1
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	60f9      	str	r1, [r7, #12]
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	701a      	strb	r2, [r3, #0]
	while (ps!=pe)
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d1f3      	bne.n	800389e <ee_bufcpy+0x16>
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <parse_float>:

static void parse_float(double value, char *buffer, char fmt, int precision)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b0a2      	sub	sp, #136	@ 0x88
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	ed87 0b04 	vstr	d0, [r7, #16]
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	460b      	mov	r3, r1
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	72fb      	strb	r3, [r7, #11]
  int decpt, sign, exp, pos;
  char *digits = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  char cvtbuf[80];
  int capexp = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  int magnitude;

  if (fmt == 'G' || fmt == 'E')
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	2b47      	cmp	r3, #71	@ 0x47
 80038e2:	d002      	beq.n	80038ea <parse_float+0x26>
 80038e4:	7afb      	ldrb	r3, [r7, #11]
 80038e6:	2b45      	cmp	r3, #69	@ 0x45
 80038e8:	d104      	bne.n	80038f4 <parse_float+0x30>
  {
    capexp = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    fmt += 'a' - 'A';
 80038ee:	7afb      	ldrb	r3, [r7, #11]
 80038f0:	3320      	adds	r3, #32
 80038f2:	72fb      	strb	r3, [r7, #11]
  }

  if (fmt == 'g')
 80038f4:	7afb      	ldrb	r3, [r7, #11]
 80038f6:	2b67      	cmp	r3, #103	@ 0x67
 80038f8:	d122      	bne.n	8003940 <parse_float+0x7c>
  {
    digits = ecvtbuf(value, precision, &decpt, &sign, cvtbuf);
 80038fa:	f107 031c 	add.w	r3, r7, #28
 80038fe:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8003902:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	ed97 0b04 	vldr	d0, [r7, #16]
 800390c:	f7ff fcd0 	bl	80032b0 <ecvtbuf>
 8003910:	67f8      	str	r0, [r7, #124]	@ 0x7c
    magnitude = decpt - 1;
 8003912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003914:	3b01      	subs	r3, #1
 8003916:	677b      	str	r3, [r7, #116]	@ 0x74
    if (magnitude < -4  ||  magnitude > precision - 1)
 8003918:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800391a:	f113 0f04 	cmn.w	r3, #4
 800391e:	db03      	blt.n	8003928 <parse_float+0x64>
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003924:	429a      	cmp	r2, r3
 8003926:	dc05      	bgt.n	8003934 <parse_float+0x70>
    {
      fmt = 'e';
 8003928:	2365      	movs	r3, #101	@ 0x65
 800392a:	72fb      	strb	r3, [r7, #11]
      precision -= 1;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	e005      	b.n	8003940 <parse_float+0x7c>
    }
    else
    {
      fmt = 'f';
 8003934:	2366      	movs	r3, #102	@ 0x66
 8003936:	72fb      	strb	r3, [r7, #11]
      precision -= decpt;
 8003938:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	607b      	str	r3, [r7, #4]
    }
  }

  if (fmt == 'e')
 8003940:	7afb      	ldrb	r3, [r7, #11]
 8003942:	2b65      	cmp	r3, #101	@ 0x65
 8003944:	f040 80b8 	bne.w	8003ab8 <parse_float+0x1f4>
  {
    digits = ecvtbuf(value, precision + 1, &decpt, &sign, cvtbuf);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1c58      	adds	r0, r3, #1
 800394c:	f107 031c 	add.w	r3, r7, #28
 8003950:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8003954:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8003958:	ed97 0b04 	vldr	d0, [r7, #16]
 800395c:	f7ff fca8 	bl	80032b0 <ecvtbuf>
 8003960:	67f8      	str	r0, [r7, #124]	@ 0x7c

    if (sign) *buffer++ = '-';
 8003962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <parse_float+0xae>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	60fa      	str	r2, [r7, #12]
 800396e:	222d      	movs	r2, #45	@ 0x2d
 8003970:	701a      	strb	r2, [r3, #0]
    *buffer++ = *digits;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	60fa      	str	r2, [r7, #12]
 8003978:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	701a      	strb	r2, [r3, #0]
    if (precision > 0) *buffer++ = '.';
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	dd04      	ble.n	800398e <parse_float+0xca>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	60fa      	str	r2, [r7, #12]
 800398a:	222e      	movs	r2, #46	@ 0x2e
 800398c:	701a      	strb	r2, [r3, #0]
    ee_bufcpy(buffer, digits + 1, precision);
 800398e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003990:	3301      	adds	r3, #1
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4619      	mov	r1, r3
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff ff76 	bl	8003888 <ee_bufcpy>
    buffer += precision;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
    *buffer++ = capexp ? 'E' : 'e';
 80039a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <parse_float+0xea>
 80039aa:	2145      	movs	r1, #69	@ 0x45
 80039ac:	e000      	b.n	80039b0 <parse_float+0xec>
 80039ae:	2165      	movs	r1, #101	@ 0x65
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	60fa      	str	r2, [r7, #12]
 80039b6:	460a      	mov	r2, r1
 80039b8:	701a      	strb	r2, [r3, #0]

    if (decpt == 0)
 80039ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <parse_float+0x124>
    {
      if (value == 0.0)
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039cc:	f7fd f834 	bl	8000a38 <__aeabi_dcmpeq>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <parse_float+0x11a>
        exp = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039dc:	e008      	b.n	80039f0 <parse_float+0x12c>
      else
        exp = -1;
 80039de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039e6:	e003      	b.n	80039f0 <parse_float+0x12c>
    }
    else
      exp = decpt - 1;
 80039e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039ea:	3b01      	subs	r3, #1
 80039ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    if (exp < 0)
 80039f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	da0a      	bge.n	8003a0e <parse_float+0x14a>
    {
      *buffer++ = '-';
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	60fa      	str	r2, [r7, #12]
 80039fe:	222d      	movs	r2, #45	@ 0x2d
 8003a00:	701a      	strb	r2, [r3, #0]
      exp = -exp;
 8003a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a06:	425b      	negs	r3, r3
 8003a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a0c:	e004      	b.n	8003a18 <parse_float+0x154>
    }
    else
      *buffer++ = '+';
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	60fa      	str	r2, [r7, #12]
 8003a14:	222b      	movs	r2, #43	@ 0x2b
 8003a16:	701a      	strb	r2, [r3, #0]

    buffer[2] = (exp % 10) + '0';
 8003a18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003a1c:	4b6e      	ldr	r3, [pc, #440]	@ (8003bd8 <parse_float+0x314>)
 8003a1e:	fb83 1302 	smull	r1, r3, r3, r2
 8003a22:	1099      	asrs	r1, r3, #2
 8003a24:	17d3      	asrs	r3, r2, #31
 8003a26:	1ac9      	subs	r1, r1, r3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	1ad1      	subs	r1, r2, r3
 8003a32:	b2ca      	uxtb	r2, r1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3302      	adds	r3, #2
 8003a38:	3230      	adds	r2, #48	@ 0x30
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]
    exp = exp / 10;
 8003a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a42:	4a65      	ldr	r2, [pc, #404]	@ (8003bd8 <parse_float+0x314>)
 8003a44:	fb82 1203 	smull	r1, r2, r2, r3
 8003a48:	1092      	asrs	r2, r2, #2
 8003a4a:	17db      	asrs	r3, r3, #31
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    buffer[1] = (exp % 10) + '0';
 8003a52:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003a56:	4b60      	ldr	r3, [pc, #384]	@ (8003bd8 <parse_float+0x314>)
 8003a58:	fb83 1302 	smull	r1, r3, r3, r2
 8003a5c:	1099      	asrs	r1, r3, #2
 8003a5e:	17d3      	asrs	r3, r2, #31
 8003a60:	1ac9      	subs	r1, r1, r3
 8003a62:	460b      	mov	r3, r1
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	1ad1      	subs	r1, r2, r3
 8003a6c:	b2ca      	uxtb	r2, r1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3301      	adds	r3, #1
 8003a72:	3230      	adds	r2, #48	@ 0x30
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]
    exp = exp / 10;
 8003a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a7c:	4a56      	ldr	r2, [pc, #344]	@ (8003bd8 <parse_float+0x314>)
 8003a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8003a82:	1092      	asrs	r2, r2, #2
 8003a84:	17db      	asrs	r3, r3, #31
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    buffer[0] = (exp % 10) + '0';
 8003a8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003a90:	4b51      	ldr	r3, [pc, #324]	@ (8003bd8 <parse_float+0x314>)
 8003a92:	fb83 1302 	smull	r1, r3, r3, r2
 8003a96:	1099      	asrs	r1, r3, #2
 8003a98:	17d3      	asrs	r3, r2, #31
 8003a9a:	1ac9      	subs	r1, r1, r3
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	1ad1      	subs	r1, r2, r3
 8003aa6:	b2cb      	uxtb	r3, r1
 8003aa8:	3330      	adds	r3, #48	@ 0x30
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	701a      	strb	r2, [r3, #0]
    buffer += 3;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3303      	adds	r3, #3
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	e088      	b.n	8003bca <parse_float+0x306>
  }
  else if (fmt == 'f')
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	2b66      	cmp	r3, #102	@ 0x66
 8003abc:	f040 8085 	bne.w	8003bca <parse_float+0x306>
  {
    digits = fcvtbuf(value, precision, &decpt, &sign, cvtbuf);
 8003ac0:	f107 031c 	add.w	r3, r7, #28
 8003ac4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8003ac8:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	ed97 0b04 	vldr	d0, [r7, #16]
 8003ad2:	f7ff fc05 	bl	80032e0 <fcvtbuf>
 8003ad6:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (sign) *buffer++ = '-';
 8003ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <parse_float+0x224>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	60fa      	str	r2, [r7, #12]
 8003ae4:	222d      	movs	r2, #45	@ 0x2d
 8003ae6:	701a      	strb	r2, [r3, #0]
    if (*digits)
 8003ae8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d04c      	beq.n	8003b8a <parse_float+0x2c6>
    {
      if (decpt <= 0)
 8003af0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	dc2b      	bgt.n	8003b4e <parse_float+0x28a>
      {
        *buffer++ = '0';
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	60fa      	str	r2, [r7, #12]
 8003afc:	2230      	movs	r2, #48	@ 0x30
 8003afe:	701a      	strb	r2, [r3, #0]
        *buffer++ = '.';
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	60fa      	str	r2, [r7, #12]
 8003b06:	222e      	movs	r2, #46	@ 0x2e
 8003b08:	701a      	strb	r2, [r3, #0]
        for (pos = 0; pos < -decpt; pos++) *buffer++ = '0';
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b10:	e009      	b.n	8003b26 <parse_float+0x262>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	60fa      	str	r2, [r7, #12]
 8003b18:	2230      	movs	r2, #48	@ 0x30
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b20:	3301      	adds	r3, #1
 8003b22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b28:	425b      	negs	r3, r3
 8003b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	dbef      	blt.n	8003b12 <parse_float+0x24e>
        while (*digits) *buffer++ = *digits++;
 8003b32:	e007      	b.n	8003b44 <parse_float+0x280>
 8003b34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b36:	1c53      	adds	r3, r2, #1
 8003b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1c59      	adds	r1, r3, #1
 8003b3e:	60f9      	str	r1, [r7, #12]
 8003b40:	7812      	ldrb	r2, [r2, #0]
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f3      	bne.n	8003b34 <parse_float+0x270>
 8003b4c:	e03d      	b.n	8003bca <parse_float+0x306>
      }
      else
      {
        pos = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        while (*digits)
 8003b54:	e014      	b.n	8003b80 <parse_float+0x2bc>
        {
          if (pos++ == decpt) *buffer++ = '.';
 8003b56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b60:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d104      	bne.n	8003b70 <parse_float+0x2ac>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	60fa      	str	r2, [r7, #12]
 8003b6c:	222e      	movs	r2, #46	@ 0x2e
 8003b6e:	701a      	strb	r2, [r3, #0]
          *buffer++ = *digits++;
 8003b70:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b72:	1c53      	adds	r3, r2, #1
 8003b74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1c59      	adds	r1, r3, #1
 8003b7a:	60f9      	str	r1, [r7, #12]
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	701a      	strb	r2, [r3, #0]
        while (*digits)
 8003b80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e6      	bne.n	8003b56 <parse_float+0x292>
 8003b88:	e01f      	b.n	8003bca <parse_float+0x306>
        }
      }
    }
    else
    {
      *buffer++ = '0';
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	60fa      	str	r2, [r7, #12]
 8003b90:	2230      	movs	r2, #48	@ 0x30
 8003b92:	701a      	strb	r2, [r3, #0]
      if (precision > 0)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	dd17      	ble.n	8003bca <parse_float+0x306>
      {
        *buffer++ = '.';
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	60fa      	str	r2, [r7, #12]
 8003ba0:	222e      	movs	r2, #46	@ 0x2e
 8003ba2:	701a      	strb	r2, [r3, #0]
        for (pos = 0; pos < precision; pos++) *buffer++ = '0';
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003baa:	e009      	b.n	8003bc0 <parse_float+0x2fc>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	60fa      	str	r2, [r7, #12]
 8003bb2:	2230      	movs	r2, #48	@ 0x30
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	dbf0      	blt.n	8003bac <parse_float+0x2e8>
      }
    }
  }

  *buffer = '\0';
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	3788      	adds	r7, #136	@ 0x88
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	66666667 	.word	0x66666667

08003bdc <decimal_point>:

static void decimal_point(char *buffer)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  while (*buffer)
 8003be4:	e00e      	b.n	8003c04 <decimal_point+0x28>
  {
    if (*buffer == '.') return;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bec:	d036      	beq.n	8003c5c <decimal_point+0x80>
    if (*buffer == 'e' || *buffer == 'E') break;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b65      	cmp	r3, #101	@ 0x65
 8003bf4:	d00a      	beq.n	8003c0c <decimal_point+0x30>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b45      	cmp	r3, #69	@ 0x45
 8003bfc:	d006      	beq.n	8003c0c <decimal_point+0x30>
    buffer++;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3301      	adds	r3, #1
 8003c02:	607b      	str	r3, [r7, #4]
  while (*buffer)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ec      	bne.n	8003be6 <decimal_point+0xa>
  }

  if (*buffer)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01a      	beq.n	8003c4a <decimal_point+0x6e>
  {
    int n = strnlen(buffer,256);
 8003c14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff fb79 	bl	8003310 <strnlen>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	60fb      	str	r3, [r7, #12]
    while (n > 0)
 8003c22:	e00b      	b.n	8003c3c <decimal_point+0x60>
    {
      buffer[n + 1] = buffer[n];
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	441a      	add	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	440b      	add	r3, r1
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	701a      	strb	r2, [r3, #0]
      n--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
    while (n > 0)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dcf0      	bgt.n	8003c24 <decimal_point+0x48>
    }

    *buffer = '.';
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	222e      	movs	r2, #46	@ 0x2e
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e009      	b.n	8003c5e <decimal_point+0x82>
  }
  else
  {
    *buffer++ = '.';
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	222e      	movs	r2, #46	@ 0x2e
 8003c52:	701a      	strb	r2, [r3, #0]
    *buffer = '\0';
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e000      	b.n	8003c5e <decimal_point+0x82>
    if (*buffer == '.') return;
 8003c5c:	bf00      	nop
  }
}
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <cropzeros>:

static void cropzeros(char *buffer)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  char *stop;

  while (*buffer && *buffer != '.') buffer++;
 8003c6c:	e002      	b.n	8003c74 <cropzeros+0x10>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3301      	adds	r3, #1
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <cropzeros+0x20>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c82:	d1f4      	bne.n	8003c6e <cropzeros+0xa>
  if (*buffer++)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02d      	beq.n	8003cec <cropzeros+0x88>
  {
    while (*buffer && *buffer != 'e' && *buffer != 'E') buffer++;
 8003c90:	e002      	b.n	8003c98 <cropzeros+0x34>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3301      	adds	r3, #1
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <cropzeros+0x4c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b65      	cmp	r3, #101	@ 0x65
 8003ca6:	d003      	beq.n	8003cb0 <cropzeros+0x4c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b45      	cmp	r3, #69	@ 0x45
 8003cae:	d1f0      	bne.n	8003c92 <cropzeros+0x2e>
    stop = buffer--;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1e5a      	subs	r2, r3, #1
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]
    while (*buffer == '0') buffer--;
 8003cb8:	e002      	b.n	8003cc0 <cropzeros+0x5c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b30      	cmp	r3, #48	@ 0x30
 8003cc6:	d0f8      	beq.n	8003cba <cropzeros+0x56>
    if (*buffer == '.') buffer--;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cce:	d109      	bne.n	8003ce4 <cropzeros+0x80>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	607b      	str	r3, [r7, #4]
    while (buffer!=stop)
 8003cd6:	e005      	b.n	8003ce4 <cropzeros+0x80>
		*++buffer=0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
    while (buffer!=stop)
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1f5      	bne.n	8003cd8 <cropzeros+0x74>
  }
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <flt>:

static char *flt(char *str, double num, int size, int precision, char fmt, int flags)
{
 8003cf8:	b5b0      	push	{r4, r5, r7, lr}
 8003cfa:	b09e      	sub	sp, #120	@ 0x78
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6178      	str	r0, [r7, #20]
 8003d00:	ed87 0b02 	vstr	d0, [r7, #8]
 8003d04:	6139      	str	r1, [r7, #16]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	70fb      	strb	r3, [r7, #3]
  char tmp[80];
  char c, sign;
  int n, i;

  // Left align means no zero padding
  if (flags & LEFT) flags &= ~ZEROPAD;
 8003d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <flt+0x2a>
 8003d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  // Determine padding and sign char
  c = (flags & ZEROPAD) ? '0' : ' ';
 8003d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <flt+0x3a>
 8003d2e:	2330      	movs	r3, #48	@ 0x30
 8003d30:	e000      	b.n	8003d34 <flt+0x3c>
 8003d32:	2320      	movs	r3, #32
 8003d34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  sign = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if (flags & SIGN)
 8003d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d030      	beq.n	8003dac <flt+0xb4>
  {
    if (num < 0.0)
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d56:	f7fc fe79 	bl	8000a4c <__aeabi_dcmplt>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00c      	beq.n	8003d7a <flt+0x82>
    {
      sign = '-';
 8003d60:	232d      	movs	r3, #45	@ 0x2d
 8003d62:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      num = -num;
 8003d66:	68bc      	ldr	r4, [r7, #8]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003d6e:	e9c7 4502 	strd	r4, r5, [r7, #8]
      size--;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	e018      	b.n	8003dac <flt+0xb4>
    }
    else if (flags & PLUS)
 8003d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d006      	beq.n	8003d94 <flt+0x9c>
    {
      sign = '+';
 8003d86:	232b      	movs	r3, #43	@ 0x2b
 8003d88:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      size--;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e00b      	b.n	8003dac <flt+0xb4>
    }
    else if (flags & SPACE)
 8003d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <flt+0xb4>
    {
      sign = ' ';
 8003da0:	2320      	movs	r3, #32
 8003da2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      size--;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]
    }
  }

  // Compute the precision value
  if (precision < 0)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da01      	bge.n	8003db6 <flt+0xbe>
    precision = 6; // Default precision: 6
 8003db2:	2306      	movs	r3, #6
 8003db4:	607b      	str	r3, [r7, #4]

  // Convert floating point number to text
  parse_float(num, tmp, fmt, precision);
 8003db6:	78f9      	ldrb	r1, [r7, #3]
 8003db8:	f107 0318 	add.w	r3, r7, #24
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	ed97 0b02 	vldr	d0, [r7, #8]
 8003dc4:	f7ff fd7e 	bl	80038c4 <parse_float>

  if ((flags & HEX_PREP) && precision == 0) decimal_point(tmp);
 8003dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <flt+0xec>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <flt+0xec>
 8003dda:	f107 0318 	add.w	r3, r7, #24
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fefc 	bl	8003bdc <decimal_point>
  if (fmt == 'g' && !(flags & HEX_PREP)) cropzeros(tmp);
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	2b67      	cmp	r3, #103	@ 0x67
 8003de8:	d10a      	bne.n	8003e00 <flt+0x108>
 8003dea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <flt+0x108>
 8003df6:	f107 0318 	add.w	r3, r7, #24
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ff32 	bl	8003c64 <cropzeros>

  n = strnlen(tmp,256);
 8003e00:	f107 0318 	add.w	r3, r7, #24
 8003e04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fa81 	bl	8003310 <strnlen>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	66bb      	str	r3, [r7, #104]	@ 0x68

  // Output number with alignment and padding
  size -= n;
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	613b      	str	r3, [r7, #16]
  if (!(flags & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
 8003e1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e1e:	f003 0311 	and.w	r3, r3, #17
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <flt+0x144>
 8003e26:	e004      	b.n	8003e32 <flt+0x13a>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	617a      	str	r2, [r7, #20]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1e5a      	subs	r2, r3, #1
 8003e36:	613a      	str	r2, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	dcf5      	bgt.n	8003e28 <flt+0x130>
  if (sign) *str++ = sign;
 8003e3c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <flt+0x158>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	617a      	str	r2, [r7, #20]
 8003e4a:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8003e4e:	701a      	strb	r2, [r3, #0]
  if (!(flags & LEFT)) while (size-- > 0) *str++ = c;
 8003e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <flt+0x17c>
 8003e5c:	e005      	b.n	8003e6a <flt+0x172>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	617a      	str	r2, [r7, #20]
 8003e64:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	613a      	str	r2, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	dcf4      	bgt.n	8003e5e <flt+0x166>
  for (i = 0; i < n; i++) *str++ = tmp[i];
 8003e74:	2300      	movs	r3, #0
 8003e76:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e78:	e00b      	b.n	8003e92 <flt+0x19a>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	617a      	str	r2, [r7, #20]
 8003e80:	f107 0118 	add.w	r1, r7, #24
 8003e84:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003e86:	440a      	add	r2, r1
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e8e:	3301      	adds	r3, #1
 8003e90:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e92:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003e94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e96:	429a      	cmp	r2, r3
 8003e98:	dbef      	blt.n	8003e7a <flt+0x182>
  while (size-- > 0) *str++ = ' ';
 8003e9a:	e004      	b.n	8003ea6 <flt+0x1ae>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	617a      	str	r2, [r7, #20]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	613a      	str	r2, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	dcf5      	bgt.n	8003e9c <flt+0x1a4>

  return str;
 8003eb0:	697b      	ldr	r3, [r7, #20]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3778      	adds	r7, #120	@ 0x78
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003ebc <ee_vsprintf>:

#endif

static int ee_vsprintf(char *buf, const char *fmt, va_list args)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b090      	sub	sp, #64	@ 0x40
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  for (str = buf; *fmt; fmt++)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ecc:	e23f      	b.n	800434e <ee_vsprintf+0x492>
  {
    if (*fmt != '%')
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b25      	cmp	r3, #37	@ 0x25
 8003ed4:	d006      	beq.n	8003ee4 <ee_vsprintf+0x28>
    {
      *str++ = *fmt;
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eda:	1c59      	adds	r1, r3, #1
 8003edc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	701a      	strb	r2, [r3, #0]
      continue;
 8003ee2:	e231      	b.n	8004348 <ee_vsprintf+0x48c>
    }

    // Process flags
    flags = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	623b      	str	r3, [r7, #32]
repeat:
    fmt++; // This also skips first '%'
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	3301      	adds	r3, #1
 8003eec:	60bb      	str	r3, [r7, #8]
    switch (*fmt)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	3b20      	subs	r3, #32
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d83e      	bhi.n	8003f76 <ee_vsprintf+0xba>
 8003ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <ee_vsprintf+0x44>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f59 	.word	0x08003f59
 8003f04:	08003f77 	.word	0x08003f77
 8003f08:	08003f77 	.word	0x08003f77
 8003f0c:	08003f63 	.word	0x08003f63
 8003f10:	08003f77 	.word	0x08003f77
 8003f14:	08003f77 	.word	0x08003f77
 8003f18:	08003f77 	.word	0x08003f77
 8003f1c:	08003f77 	.word	0x08003f77
 8003f20:	08003f77 	.word	0x08003f77
 8003f24:	08003f77 	.word	0x08003f77
 8003f28:	08003f77 	.word	0x08003f77
 8003f2c:	08003f4f 	.word	0x08003f4f
 8003f30:	08003f77 	.word	0x08003f77
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f77 	.word	0x08003f77
 8003f3c:	08003f77 	.word	0x08003f77
 8003f40:	08003f6d 	.word	0x08003f6d
    {
      case '-': flags |= LEFT; goto repeat;
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f043 0310 	orr.w	r3, r3, #16
 8003f4a:	623b      	str	r3, [r7, #32]
 8003f4c:	e7cc      	b.n	8003ee8 <ee_vsprintf+0x2c>
      case '+': flags |= PLUS; goto repeat;
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f043 0304 	orr.w	r3, r3, #4
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	e7c7      	b.n	8003ee8 <ee_vsprintf+0x2c>
      case ' ': flags |= SPACE; goto repeat;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f043 0308 	orr.w	r3, r3, #8
 8003f5e:	623b      	str	r3, [r7, #32]
 8003f60:	e7c2      	b.n	8003ee8 <ee_vsprintf+0x2c>
      case '#': flags |= HEX_PREP; goto repeat;
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f043 0320 	orr.w	r3, r3, #32
 8003f68:	623b      	str	r3, [r7, #32]
 8003f6a:	e7bd      	b.n	8003ee8 <ee_vsprintf+0x2c>
      case '0': flags |= ZEROPAD; goto repeat;
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	e7b8      	b.n	8003ee8 <ee_vsprintf+0x2c>
    }

    // Get field width
    field_width = -1;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f7a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b2f      	cmp	r3, #47	@ 0x2f
 8003f82:	d90a      	bls.n	8003f9a <ee_vsprintf+0xde>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b39      	cmp	r3, #57	@ 0x39
 8003f8a:	d806      	bhi.n	8003f9a <ee_vsprintf+0xde>
      field_width = skip_atoi(&fmt);
 8003f8c:	f107 0308 	add.w	r3, r7, #8
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f9da 	bl	800334a <skip_atoi>
 8003f96:	61f8      	str	r0, [r7, #28]
 8003f98:	e015      	b.n	8003fc6 <ee_vsprintf+0x10a>
    else if (*fmt == '*')
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fa0:	d111      	bne.n	8003fc6 <ee_vsprintf+0x10a>
    {
      fmt++;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	60bb      	str	r3, [r7, #8]
      field_width = va_arg(args, int);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	1d1a      	adds	r2, r3, #4
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	61fb      	str	r3, [r7, #28]
      if (field_width < 0)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	da06      	bge.n	8003fc6 <ee_vsprintf+0x10a>
      {
        field_width = -field_width;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	425b      	negs	r3, r3
 8003fbc:	61fb      	str	r3, [r7, #28]
        flags |= LEFT;
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f043 0310 	orr.w	r3, r3, #16
 8003fc4:	623b      	str	r3, [r7, #32]
      }
    }

    // Get the precision
    precision = -1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fca:	61bb      	str	r3, [r7, #24]
    if (*fmt == '.')
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fd2:	d122      	bne.n	800401a <ee_vsprintf+0x15e>
    {
      ++fmt;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]
      if (is_digit(*fmt))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b2f      	cmp	r3, #47	@ 0x2f
 8003fe0:	d90a      	bls.n	8003ff8 <ee_vsprintf+0x13c>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b39      	cmp	r3, #57	@ 0x39
 8003fe8:	d806      	bhi.n	8003ff8 <ee_vsprintf+0x13c>
        precision = skip_atoi(&fmt);
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff f9ab 	bl	800334a <skip_atoi>
 8003ff4:	61b8      	str	r0, [r7, #24]
 8003ff6:	e00b      	b.n	8004010 <ee_vsprintf+0x154>
      else if (*fmt == '*')
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ffe:	d107      	bne.n	8004010 <ee_vsprintf+0x154>
      {
        ++fmt;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3301      	adds	r3, #1
 8004004:	60bb      	str	r3, [r7, #8]
        precision = va_arg(args, int);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	1d1a      	adds	r2, r3, #4
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	61bb      	str	r3, [r7, #24]
      }
      if (precision < 0) precision = 0;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	da01      	bge.n	800401a <ee_vsprintf+0x15e>
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
    }

    // Get the conversion qualifier
    qualifier = -1;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800401e:	617b      	str	r3, [r7, #20]
    if (*fmt == 'l' || *fmt == 'L')
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b6c      	cmp	r3, #108	@ 0x6c
 8004026:	d003      	beq.n	8004030 <ee_vsprintf+0x174>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b4c      	cmp	r3, #76	@ 0x4c
 800402e:	d105      	bne.n	800403c <ee_vsprintf+0x180>
    {
      qualifier = *fmt;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	617b      	str	r3, [r7, #20]
      fmt++;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	3301      	adds	r3, #1
 800403a:	60bb      	str	r3, [r7, #8]
    }

    // Default base
    base = 10;
 800403c:	230a      	movs	r3, #10
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (*fmt)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	3b41      	subs	r3, #65	@ 0x41
 8004046:	2b37      	cmp	r3, #55	@ 0x37
 8004048:	f200 8141 	bhi.w	80042ce <ee_vsprintf+0x412>
 800404c:	a201      	add	r2, pc, #4	@ (adr r2, 8004054 <ee_vsprintf+0x198>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004239 	.word	0x08004239
 8004058:	080042cf 	.word	0x080042cf
 800405c:	080042cf 	.word	0x080042cf
 8004060:	080042cf 	.word	0x080042cf
 8004064:	080042cf 	.word	0x080042cf
 8004068:	080042cf 	.word	0x080042cf
 800406c:	080042cf 	.word	0x080042cf
 8004070:	080042cf 	.word	0x080042cf
 8004074:	080042cf 	.word	0x080042cf
 8004078:	080042cf 	.word	0x080042cf
 800407c:	080042cf 	.word	0x080042cf
 8004080:	080042cf 	.word	0x080042cf
 8004084:	080042cf 	.word	0x080042cf
 8004088:	080042cf 	.word	0x080042cf
 800408c:	080042cf 	.word	0x080042cf
 8004090:	080042cf 	.word	0x080042cf
 8004094:	080042cf 	.word	0x080042cf
 8004098:	080042cf 	.word	0x080042cf
 800409c:	080042cf 	.word	0x080042cf
 80040a0:	080042cf 	.word	0x080042cf
 80040a4:	080042cf 	.word	0x080042cf
 80040a8:	080042cf 	.word	0x080042cf
 80040ac:	080042cf 	.word	0x080042cf
 80040b0:	08004281 	.word	0x08004281
 80040b4:	080042cf 	.word	0x080042cf
 80040b8:	080042cf 	.word	0x080042cf
 80040bc:	080042cf 	.word	0x080042cf
 80040c0:	080042cf 	.word	0x080042cf
 80040c4:	080042cf 	.word	0x080042cf
 80040c8:	080042cf 	.word	0x080042cf
 80040cc:	080042cf 	.word	0x080042cf
 80040d0:	080042cf 	.word	0x080042cf
 80040d4:	08004241 	.word	0x08004241
 80040d8:	080042cf 	.word	0x080042cf
 80040dc:	08004135 	.word	0x08004135
 80040e0:	0800428f 	.word	0x0800428f
 80040e4:	080042cf 	.word	0x080042cf
 80040e8:	08004299 	.word	0x08004299
 80040ec:	080042cf 	.word	0x080042cf
 80040f0:	080042cf 	.word	0x080042cf
 80040f4:	0800428f 	.word	0x0800428f
 80040f8:	080042cf 	.word	0x080042cf
 80040fc:	080042cf 	.word	0x080042cf
 8004100:	080042cf 	.word	0x080042cf
 8004104:	080042cf 	.word	0x080042cf
 8004108:	080042cf 	.word	0x080042cf
 800410c:	0800427b 	.word	0x0800427b
 8004110:	08004205 	.word	0x08004205
 8004114:	080042cf 	.word	0x080042cf
 8004118:	080042cf 	.word	0x080042cf
 800411c:	08004183 	.word	0x08004183
 8004120:	080042cf 	.word	0x080042cf
 8004124:	080042ff 	.word	0x080042ff
 8004128:	080042cf 	.word	0x080042cf
 800412c:	080042cf 	.word	0x080042cf
 8004130:	08004289 	.word	0x08004289
    {
      case 'c':
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <ee_vsprintf+0x29a>
 800413e:	e004      	b.n	800414a <ee_vsprintf+0x28e>
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004146:	2220      	movs	r2, #32
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3b01      	subs	r3, #1
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	dcf4      	bgt.n	8004140 <ee_vsprintf+0x284>
        *str++ = (unsigned char) va_arg(args, int);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	1d1a      	adds	r2, r3, #4
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004164:	b2ca      	uxtb	r2, r1
 8004166:	701a      	strb	r2, [r3, #0]
        while (--field_width > 0) *str++ = ' ';
 8004168:	e004      	b.n	8004174 <ee_vsprintf+0x2b8>
 800416a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004170:	2220      	movs	r2, #32
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3b01      	subs	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	2b00      	cmp	r3, #0
 800417e:	dcf4      	bgt.n	800416a <ee_vsprintf+0x2ae>
        continue;
 8004180:	e0e2      	b.n	8004348 <ee_vsprintf+0x48c>

      case 's':
        s = va_arg(args, char *);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	1d1a      	adds	r2, r3, #4
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <ee_vsprintf+0x2da>
 8004192:	4b76      	ldr	r3, [pc, #472]	@ (800436c <ee_vsprintf+0x4b0>)
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
        len = strnlen(s, precision);
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	4619      	mov	r1, r3
 800419a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800419c:	f7ff f8b8 	bl	8003310 <strnlen>
 80041a0:	4603      	mov	r3, r0
 80041a2:	613b      	str	r3, [r7, #16]
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <ee_vsprintf+0x30a>
 80041ae:	e004      	b.n	80041ba <ee_vsprintf+0x2fe>
 80041b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041b6:	2220      	movs	r2, #32
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	1e5a      	subs	r2, r3, #1
 80041be:	61fa      	str	r2, [r7, #28]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	dbf4      	blt.n	80041b0 <ee_vsprintf+0x2f4>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80041c6:	2300      	movs	r3, #0
 80041c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ca:	e00a      	b.n	80041e2 <ee_vsprintf+0x326>
 80041cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ce:	1c53      	adds	r3, r2, #1
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	1c59      	adds	r1, r3, #1
 80041d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	3301      	adds	r3, #1
 80041e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	dbf0      	blt.n	80041cc <ee_vsprintf+0x310>
        while (len < field_width--) *str++ = ' ';
 80041ea:	e004      	b.n	80041f6 <ee_vsprintf+0x33a>
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041f2:	2220      	movs	r2, #32
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	1e5a      	subs	r2, r3, #1
 80041fa:	61fa      	str	r2, [r7, #28]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	429a      	cmp	r2, r3
 8004200:	dbf4      	blt.n	80041ec <ee_vsprintf+0x330>
        continue;
 8004202:	e0a1      	b.n	8004348 <ee_vsprintf+0x48c>

      case 'p':
        if (field_width == -1)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800420a:	d105      	bne.n	8004218 <ee_vsprintf+0x35c>
        {
          field_width = 2 * sizeof(void *);
 800420c:	2308      	movs	r3, #8
 800420e:	61fb      	str	r3, [r7, #28]
          flags |= ZEROPAD;
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	623b      	str	r3, [r7, #32]
        }
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	1d1a      	adds	r2, r3, #4
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4619      	mov	r1, r3
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2210      	movs	r2, #16
 800422e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004230:	f7ff f8b2 	bl	8003398 <number>
 8004234:	62b8      	str	r0, [r7, #40]	@ 0x28
        continue;
 8004236:	e087      	b.n	8004348 <ee_vsprintf+0x48c>

      case 'A':
        flags |= UPPERCASE;
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800423e:	623b      	str	r3, [r7, #32]

      case 'a':
        if (qualifier == 'l')
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b6c      	cmp	r3, #108	@ 0x6c
 8004244:	d10c      	bne.n	8004260 <ee_vsprintf+0x3a4>
          str = eaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	1d1a      	adds	r2, r3, #4
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004258:	f7ff f9b4 	bl	80035c4 <eaddr>
 800425c:	62b8      	str	r0, [r7, #40]	@ 0x28
        else
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
        continue;
 800425e:	e073      	b.n	8004348 <ee_vsprintf+0x48c>
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004272:	f7ff fa2b 	bl	80036cc <iaddr>
 8004276:	62b8      	str	r0, [r7, #40]	@ 0x28
        continue;
 8004278:	e066      	b.n	8004348 <ee_vsprintf+0x48c>

      // Integer number formats - set up the flags and "break"
      case 'o':
        base = 8;
 800427a:	2308      	movs	r3, #8
 800427c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800427e:	e03f      	b.n	8004300 <ee_vsprintf+0x444>

      case 'X':
        flags |= UPPERCASE;
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004286:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8004288:	2310      	movs	r3, #16
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800428c:	e038      	b.n	8004300 <ee_vsprintf+0x444>

      case 'd':
      case 'i':
        flags |= SIGN;
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8004296:	e032      	b.n	80042fe <ee_vsprintf+0x442>

#if HAS_FLOAT

      case 'f':
        str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3307      	adds	r3, #7
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	f103 0208 	add.w	r2, r3, #8
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	ed93 7b00 	vldr	d7, [r3]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4613      	mov	r3, r2
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	69f9      	ldr	r1, [r7, #28]
 80042bc:	eeb0 0a47 	vmov.f32	s0, s14
 80042c0:	eef0 0a67 	vmov.f32	s1, s15
 80042c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042c6:	f7ff fd17 	bl	8003cf8 <flt>
 80042ca:	62b8      	str	r0, [r7, #40]	@ 0x28
        continue;
 80042cc:	e03c      	b.n	8004348 <ee_vsprintf+0x48c>

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b25      	cmp	r3, #37	@ 0x25
 80042d4:	d004      	beq.n	80042e0 <ee_vsprintf+0x424>
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80042dc:	2225      	movs	r2, #37	@ 0x25
 80042de:	701a      	strb	r2, [r3, #0]
        if (*fmt)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <ee_vsprintf+0x43a>
          *str++ = *fmt;
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ec:	1c59      	adds	r1, r3, #1
 80042ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	701a      	strb	r2, [r3, #0]
        else
          --fmt;
        continue;
 80042f4:	e028      	b.n	8004348 <ee_vsprintf+0x48c>
          --fmt;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	60bb      	str	r3, [r7, #8]
        continue;
 80042fc:	e024      	b.n	8004348 <ee_vsprintf+0x48c>
        break;
 80042fe:	bf00      	nop
    }

    if (qualifier == 'l')
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2b6c      	cmp	r3, #108	@ 0x6c
 8004304:	d105      	bne.n	8004312 <ee_vsprintf+0x456>
      num = va_arg(args, unsigned long);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1d1a      	adds	r2, r3, #4
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004310:	e00f      	b.n	8004332 <ee_vsprintf+0x476>
    else if (flags & SIGN)
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <ee_vsprintf+0x46c>
      num = va_arg(args, int);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	637b      	str	r3, [r7, #52]	@ 0x34
 8004326:	e004      	b.n	8004332 <ee_vsprintf+0x476>
    else
      num = va_arg(args, unsigned int);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1d1a      	adds	r2, r3, #4
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	637b      	str	r3, [r7, #52]	@ 0x34

    str = number(str, num, base, field_width, precision, flags);
 8004332:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004342:	f7ff f829 	bl	8003398 <number>
 8004346:	62b8      	str	r0, [r7, #40]	@ 0x28
  for (str = buf; *fmt; fmt++)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	3301      	adds	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f47f adbb 	bne.w	8003ece <ee_vsprintf+0x12>
  }

  *str = '\0';
 8004358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800435e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1ad3      	subs	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	3738      	adds	r7, #56	@ 0x38
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	08005ca8 	.word	0x08005ca8

08004370 <uart_send_char>:

void uart_send_char(char c) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 0xFFFF);
 800437a:	1df9      	adds	r1, r7, #7
 800437c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004380:	2201      	movs	r2, #1
 8004382:	4803      	ldr	r0, [pc, #12]	@ (8004390 <uart_send_char+0x20>)
 8004384:	f000 fd26 	bl	8004dd4 <HAL_UART_Transmit>
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000888 	.word	0x20000888

08004394 <ee_printf>:


int ee_printf(const char *fmt, ...)
{
 8004394:	b40f      	push	{r0, r1, r2, r3}
 8004396:	b580      	push	{r7, lr}
 8004398:	b0c4      	sub	sp, #272	@ 0x110
 800439a:	af00      	add	r7, sp, #0
  char buf[256],*p;
  va_list args;
  int n=0;
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

  va_start(args, fmt);
 80043a2:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80043a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80043ae:	601a      	str	r2, [r3, #0]
  ee_vsprintf(buf, fmt, args);
 80043b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80043b8:	f107 0008 	add.w	r0, r7, #8
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80043c2:	f7ff fd7b 	bl	8003ebc <ee_vsprintf>
  va_end(args);
  p=buf;
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  while (*p) {
 80043ce:	e00f      	b.n	80043f0 <ee_printf+0x5c>
	uart_send_char(*p);
 80043d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff ffca 	bl	8004370 <uart_send_char>
	
	n++;
 80043dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80043e0:	3301      	adds	r3, #1
 80043e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	p++;
 80043e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ea:	3301      	adds	r3, #1
 80043ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  while (*p) {
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1ea      	bne.n	80043d0 <ee_printf+0x3c>
  }

  return n;
 80043fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
}
 80043fe:	4618      	mov	r0, r3
 8004400:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800440a:	b004      	add	sp, #16
 800440c:	4770      	bx	lr
	...

08004410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	4b10      	ldr	r3, [pc, #64]	@ (800445c <MX_GPIO_Init+0x4c>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441e:	4a0f      	ldr	r2, [pc, #60]	@ (800445c <MX_GPIO_Init+0x4c>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6313      	str	r3, [r2, #48]	@ 0x30
 8004426:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <MX_GPIO_Init+0x4c>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	4b09      	ldr	r3, [pc, #36]	@ (800445c <MX_GPIO_Init+0x4c>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	4a08      	ldr	r2, [pc, #32]	@ (800445c <MX_GPIO_Init+0x4c>)
 800443c:	f043 0302 	orr.w	r3, r3, #2
 8004440:	6313      	str	r3, [r2, #48]	@ 0x30
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <MX_GPIO_Init+0x4c>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	683b      	ldr	r3, [r7, #0]

}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800

08004460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004466:	f000 f92d 	bl	80046c4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800446a:	f7ff ffd1 	bl	8004410 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800446e:	f000 f88d 	bl	800458c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char test[] = "Hello, World\n";
 8004472:	4b0b      	ldr	r3, [pc, #44]	@ (80044a0 <main+0x40>)
 8004474:	f107 0408 	add.w	r4, r7, #8
 8004478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800447a:	c407      	stmia	r4!, {r0, r1, r2}
 800447c:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)test, 14, 0xFFFF);
 800447e:	f107 0108 	add.w	r1, r7, #8
 8004482:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004486:	220e      	movs	r2, #14
 8004488:	4806      	ldr	r0, [pc, #24]	@ (80044a4 <main+0x44>)
 800448a:	f000 fca3 	bl	8004dd4 <HAL_UART_Transmit>

  main2();
 800448e:	f7fd f8ff 	bl	8001690 <main2>

  volatile uint32_t r0 __asm__("r0");
  r0 = 0x18;
 8004492:	2318      	movs	r3, #24
 8004494:	607b      	str	r3, [r7, #4]
  volatile uint32_t r1 __asm__("r1");
  r1 = 0x20026;
 8004496:	4b04      	ldr	r3, [pc, #16]	@ (80044a8 <main+0x48>)
 8004498:	603b      	str	r3, [r7, #0]
  __asm__ volatile("bkpt #0xAB");
 800449a:	beab      	bkpt	0x00ab
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <main+0x3c>
 80044a0:	08005cb0 	.word	0x08005cb0
 80044a4:	20000888 	.word	0x20000888
 80044a8:	00020026 	.word	0x00020026

080044ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044b0:	b672      	cpsid	i
}
 80044b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <Error_Handler+0x8>

080044b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <HAL_MspInit+0x4c>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004504 <HAL_MspInit+0x4c>)
 80044c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004504 <HAL_MspInit+0x4c>)
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <HAL_MspInit+0x4c>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	4a08      	ldr	r2, [pc, #32]	@ (8004504 <HAL_MspInit+0x4c>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ea:	4b06      	ldr	r3, [pc, #24]	@ (8004504 <HAL_MspInit+0x4c>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800

08004508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <NMI_Handler+0x4>

08004510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <HardFault_Handler+0x4>

08004518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <MemManage_Handler+0x4>

08004520 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <BusFault_Handler+0x4>

08004528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <UsageFault_Handler+0x4>

08004530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800455e:	f000 f903 	bl	8004768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <SystemInit+0x20>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004572:	4a05      	ldr	r2, [pc, #20]	@ (8004588 <SystemInit+0x20>)
 8004574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004590:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <MX_USART1_UART_Init+0x4c>)
 8004592:	4a12      	ldr	r2, [pc, #72]	@ (80045dc <MX_USART1_UART_Init+0x50>)
 8004594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004596:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <MX_USART1_UART_Init+0x4c>)
 8004598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800459c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800459e:	4b0e      	ldr	r3, [pc, #56]	@ (80045d8 <MX_USART1_UART_Init+0x4c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045a4:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <MX_USART1_UART_Init+0x4c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045aa:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <MX_USART1_UART_Init+0x4c>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045b0:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <MX_USART1_UART_Init+0x4c>)
 80045b2:	220c      	movs	r2, #12
 80045b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045b6:	4b08      	ldr	r3, [pc, #32]	@ (80045d8 <MX_USART1_UART_Init+0x4c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045bc:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <MX_USART1_UART_Init+0x4c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045c2:	4805      	ldr	r0, [pc, #20]	@ (80045d8 <MX_USART1_UART_Init+0x4c>)
 80045c4:	f000 fbb6 	bl	8004d34 <HAL_UART_Init>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045ce:	f7ff ff6d 	bl	80044ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000888 	.word	0x20000888
 80045dc:	40011000 	.word	0x40011000

080045e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	@ 0x28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 0314 	add.w	r3, r7, #20
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <HAL_UART_MspInit+0x84>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d12c      	bne.n	800465c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	4b18      	ldr	r3, [pc, #96]	@ (8004668 <HAL_UART_MspInit+0x88>)
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	4a17      	ldr	r2, [pc, #92]	@ (8004668 <HAL_UART_MspInit+0x88>)
 800460c:	f043 0310 	orr.w	r3, r3, #16
 8004610:	6453      	str	r3, [r2, #68]	@ 0x44
 8004612:	4b15      	ldr	r3, [pc, #84]	@ (8004668 <HAL_UART_MspInit+0x88>)
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b11      	ldr	r3, [pc, #68]	@ (8004668 <HAL_UART_MspInit+0x88>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	4a10      	ldr	r2, [pc, #64]	@ (8004668 <HAL_UART_MspInit+0x88>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6313      	str	r3, [r2, #48]	@ 0x30
 800462e:	4b0e      	ldr	r3, [pc, #56]	@ (8004668 <HAL_UART_MspInit+0x88>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800463a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800463e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004640:	2302      	movs	r3, #2
 8004642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004648:	2303      	movs	r3, #3
 800464a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800464c:	2307      	movs	r3, #7
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004650:	f107 0314 	add.w	r3, r7, #20
 8004654:	4619      	mov	r1, r3
 8004656:	4805      	ldr	r0, [pc, #20]	@ (800466c <HAL_UART_MspInit+0x8c>)
 8004658:	f000 f98c 	bl	8004974 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800465c:	bf00      	nop
 800465e:	3728      	adds	r7, #40	@ 0x28
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40011000 	.word	0x40011000
 8004668:	40023800 	.word	0x40023800
 800466c:	40020000 	.word	0x40020000

08004670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004674:	f7ff ff78 	bl	8004568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004678:	480c      	ldr	r0, [pc, #48]	@ (80046ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800467a:	490d      	ldr	r1, [pc, #52]	@ (80046b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800467c:	4a0d      	ldr	r2, [pc, #52]	@ (80046b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800467e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004680:	e002      	b.n	8004688 <LoopCopyDataInit>

08004682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004686:	3304      	adds	r3, #4

08004688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800468a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800468c:	d3f9      	bcc.n	8004682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800468e:	4a0a      	ldr	r2, [pc, #40]	@ (80046b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004690:	4c0a      	ldr	r4, [pc, #40]	@ (80046bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004694:	e001      	b.n	800469a <LoopFillZerobss>

08004696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004698:	3204      	adds	r2, #4

0800469a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800469a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800469c:	d3fb      	bcc.n	8004696 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800469e:	f000 ff55 	bl	800554c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046a2:	f7ff fedd 	bl	8004460 <main>
  bx  lr    
 80046a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80046ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046b0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80046b4:	08005cd8 	.word	0x08005cd8
  ldr r2, =_sbss
 80046b8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80046bc:	200008d4 	.word	0x200008d4

080046c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046c0:	e7fe      	b.n	80046c0 <ADC_IRQHandler>
	...

080046c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004704 <HAL_Init+0x40>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004704 <HAL_Init+0x40>)
 80046ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <HAL_Init+0x40>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004704 <HAL_Init+0x40>)
 80046da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046e0:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <HAL_Init+0x40>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a07      	ldr	r2, [pc, #28]	@ (8004704 <HAL_Init+0x40>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ec:	2003      	movs	r0, #3
 80046ee:	f000 f90d 	bl	800490c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046f2:	200f      	movs	r0, #15
 80046f4:	f000 f808 	bl	8004708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f8:	f7ff fede 	bl	80044b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023c00 	.word	0x40023c00

08004708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004710:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_InitTick+0x54>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <HAL_InitTick+0x58>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800471e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f917 	bl	800495a <HAL_SYSTICK_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e00e      	b.n	8004754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b0f      	cmp	r3, #15
 800473a:	d80a      	bhi.n	8004752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800473c:	2200      	movs	r2, #0
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004744:	f000 f8ed 	bl	8004922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004748:	4a06      	ldr	r2, [pc, #24]	@ (8004764 <HAL_InitTick+0x5c>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000078 	.word	0x20000078
 8004760:	20000080 	.word	0x20000080
 8004764:	2000007c 	.word	0x2000007c

08004768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800476c:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <HAL_IncTick+0x20>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_IncTick+0x24>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4413      	add	r3, r2
 8004778:	4a04      	ldr	r2, [pc, #16]	@ (800478c <HAL_IncTick+0x24>)
 800477a:	6013      	str	r3, [r2, #0]
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000080 	.word	0x20000080
 800478c:	200008d0 	.word	0x200008d0

08004790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return uwTick;
 8004794:	4b03      	ldr	r3, [pc, #12]	@ (80047a4 <HAL_GetTick+0x14>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	200008d0 	.word	0x200008d0

080047a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047b8:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <__NVIC_SetPriorityGrouping+0x44>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047c4:	4013      	ands	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047da:	4a04      	ldr	r2, [pc, #16]	@ (80047ec <__NVIC_SetPriorityGrouping+0x44>)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	60d3      	str	r3, [r2, #12]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047f4:	4b04      	ldr	r3, [pc, #16]	@ (8004808 <__NVIC_GetPriorityGrouping+0x18>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f003 0307 	and.w	r3, r3, #7
}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db0a      	blt.n	8004836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	490c      	ldr	r1, [pc, #48]	@ (8004858 <__NVIC_SetPriority+0x4c>)
 8004826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482a:	0112      	lsls	r2, r2, #4
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	440b      	add	r3, r1
 8004830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004834:	e00a      	b.n	800484c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4908      	ldr	r1, [pc, #32]	@ (800485c <__NVIC_SetPriority+0x50>)
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	3b04      	subs	r3, #4
 8004844:	0112      	lsls	r2, r2, #4
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	440b      	add	r3, r1
 800484a:	761a      	strb	r2, [r3, #24]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000e100 	.word	0xe000e100
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004860:	b480      	push	{r7}
 8004862:	b089      	sub	sp, #36	@ 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f1c3 0307 	rsb	r3, r3, #7
 800487a:	2b04      	cmp	r3, #4
 800487c:	bf28      	it	cs
 800487e:	2304      	movcs	r3, #4
 8004880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3304      	adds	r3, #4
 8004886:	2b06      	cmp	r3, #6
 8004888:	d902      	bls.n	8004890 <NVIC_EncodePriority+0x30>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3b03      	subs	r3, #3
 800488e:	e000      	b.n	8004892 <NVIC_EncodePriority+0x32>
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004894:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43da      	mvns	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	401a      	ands	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	43d9      	mvns	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b8:	4313      	orrs	r3, r2
         );
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	@ 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048d8:	d301      	bcc.n	80048de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048da:	2301      	movs	r3, #1
 80048dc:	e00f      	b.n	80048fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048de:	4a0a      	ldr	r2, [pc, #40]	@ (8004908 <SysTick_Config+0x40>)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048e6:	210f      	movs	r1, #15
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048ec:	f7ff ff8e 	bl	800480c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048f0:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <SysTick_Config+0x40>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048f6:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <SysTick_Config+0x40>)
 80048f8:	2207      	movs	r2, #7
 80048fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	e000e010 	.word	0xe000e010

0800490c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ff47 	bl	80047a8 <__NVIC_SetPriorityGrouping>
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	4603      	mov	r3, r0
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004934:	f7ff ff5c 	bl	80047f0 <__NVIC_GetPriorityGrouping>
 8004938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	6978      	ldr	r0, [r7, #20]
 8004940:	f7ff ff8e 	bl	8004860 <NVIC_EncodePriority>
 8004944:	4602      	mov	r2, r0
 8004946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff5d 	bl	800480c <__NVIC_SetPriority>
}
 8004952:	bf00      	nop
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff ffb0 	bl	80048c8 <SysTick_Config>
 8004968:	4603      	mov	r3, r0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004974:	b480      	push	{r7}
 8004976:	b089      	sub	sp, #36	@ 0x24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004986:	2300      	movs	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	e177      	b.n	8004c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004990:	2201      	movs	r2, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4013      	ands	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f040 8166 	bne.w	8004c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d005      	beq.n	80049c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d130      	bne.n	8004a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	2203      	movs	r2, #3
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4013      	ands	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049fc:	2201      	movs	r2, #1
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 0201 	and.w	r2, r3, #1
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d017      	beq.n	8004a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	2203      	movs	r2, #3
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d123      	bne.n	8004ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	08da      	lsrs	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3208      	adds	r2, #8
 8004a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	220f      	movs	r2, #15
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	08da      	lsrs	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3208      	adds	r2, #8
 8004ab2:	69b9      	ldr	r1, [r7, #24]
 8004ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0203 	and.w	r2, r3, #3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80c0 	beq.w	8004c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	4b66      	ldr	r3, [pc, #408]	@ (8004c98 <HAL_GPIO_Init+0x324>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b02:	4a65      	ldr	r2, [pc, #404]	@ (8004c98 <HAL_GPIO_Init+0x324>)
 8004b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b0a:	4b63      	ldr	r3, [pc, #396]	@ (8004c98 <HAL_GPIO_Init+0x324>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b16:	4a61      	ldr	r2, [pc, #388]	@ (8004c9c <HAL_GPIO_Init+0x328>)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	089b      	lsrs	r3, r3, #2
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	220f      	movs	r2, #15
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a58      	ldr	r2, [pc, #352]	@ (8004ca0 <HAL_GPIO_Init+0x32c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d037      	beq.n	8004bb2 <HAL_GPIO_Init+0x23e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a57      	ldr	r2, [pc, #348]	@ (8004ca4 <HAL_GPIO_Init+0x330>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d031      	beq.n	8004bae <HAL_GPIO_Init+0x23a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a56      	ldr	r2, [pc, #344]	@ (8004ca8 <HAL_GPIO_Init+0x334>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02b      	beq.n	8004baa <HAL_GPIO_Init+0x236>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a55      	ldr	r2, [pc, #340]	@ (8004cac <HAL_GPIO_Init+0x338>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d025      	beq.n	8004ba6 <HAL_GPIO_Init+0x232>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a54      	ldr	r2, [pc, #336]	@ (8004cb0 <HAL_GPIO_Init+0x33c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01f      	beq.n	8004ba2 <HAL_GPIO_Init+0x22e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a53      	ldr	r2, [pc, #332]	@ (8004cb4 <HAL_GPIO_Init+0x340>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d019      	beq.n	8004b9e <HAL_GPIO_Init+0x22a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	@ (8004cb8 <HAL_GPIO_Init+0x344>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_GPIO_Init+0x226>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a51      	ldr	r2, [pc, #324]	@ (8004cbc <HAL_GPIO_Init+0x348>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00d      	beq.n	8004b96 <HAL_GPIO_Init+0x222>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a50      	ldr	r2, [pc, #320]	@ (8004cc0 <HAL_GPIO_Init+0x34c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <HAL_GPIO_Init+0x21e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a4f      	ldr	r2, [pc, #316]	@ (8004cc4 <HAL_GPIO_Init+0x350>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <HAL_GPIO_Init+0x21a>
 8004b8a:	2309      	movs	r3, #9
 8004b8c:	e012      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b8e:	230a      	movs	r3, #10
 8004b90:	e010      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b92:	2308      	movs	r3, #8
 8004b94:	e00e      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b96:	2307      	movs	r3, #7
 8004b98:	e00c      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b9a:	2306      	movs	r3, #6
 8004b9c:	e00a      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b9e:	2305      	movs	r3, #5
 8004ba0:	e008      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	e006      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e004      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e002      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	f002 0203 	and.w	r2, r2, #3
 8004bba:	0092      	lsls	r2, r2, #2
 8004bbc:	4093      	lsls	r3, r2
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc4:	4935      	ldr	r1, [pc, #212]	@ (8004c9c <HAL_GPIO_Init+0x328>)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	3302      	adds	r3, #2
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc8 <HAL_GPIO_Init+0x354>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4013      	ands	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bf6:	4a34      	ldr	r2, [pc, #208]	@ (8004cc8 <HAL_GPIO_Init+0x354>)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bfc:	4b32      	ldr	r3, [pc, #200]	@ (8004cc8 <HAL_GPIO_Init+0x354>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c20:	4a29      	ldr	r2, [pc, #164]	@ (8004cc8 <HAL_GPIO_Init+0x354>)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c26:	4b28      	ldr	r3, [pc, #160]	@ (8004cc8 <HAL_GPIO_Init+0x354>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc8 <HAL_GPIO_Init+0x354>)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c50:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc8 <HAL_GPIO_Init+0x354>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c74:	4a14      	ldr	r2, [pc, #80]	@ (8004cc8 <HAL_GPIO_Init+0x354>)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b0f      	cmp	r3, #15
 8004c84:	f67f ae84 	bls.w	8004990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	3724      	adds	r7, #36	@ 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	40013800 	.word	0x40013800
 8004ca0:	40020000 	.word	0x40020000
 8004ca4:	40020400 	.word	0x40020400
 8004ca8:	40020800 	.word	0x40020800
 8004cac:	40020c00 	.word	0x40020c00
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40021400 	.word	0x40021400
 8004cb8:	40021800 	.word	0x40021800
 8004cbc:	40021c00 	.word	0x40021c00
 8004cc0:	40022000 	.word	0x40022000
 8004cc4:	40022400 	.word	0x40022400
 8004cc8:	40013c00 	.word	0x40013c00

08004ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	@ (8004ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000078 	.word	0x20000078

08004ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ce8:	f7ff fff0 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	0a9b      	lsrs	r3, r3, #10
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4903      	ldr	r1, [pc, #12]	@ (8004d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40023800 	.word	0x40023800
 8004d08:	08005cc0 	.word	0x08005cc0

08004d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d10:	f7ff ffdc 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	0b5b      	lsrs	r3, r3, #13
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4903      	ldr	r1, [pc, #12]	@ (8004d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	08005cc0 	.word	0x08005cc0

08004d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e042      	b.n	8004dcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff fc40 	bl	80045e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	@ 0x24
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f973 	bl	8005064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	@ 0x28
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d175      	bne.n	8004ee0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_UART_Transmit+0x2c>
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e06e      	b.n	8004ee2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2221      	movs	r2, #33	@ 0x21
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e12:	f7ff fcbd 	bl	8004790 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	88fa      	ldrh	r2, [r7, #6]
 8004e22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2c:	d108      	bne.n	8004e40 <HAL_UART_Transmit+0x6c>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d104      	bne.n	8004e40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	e003      	b.n	8004e48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e48:	e02e      	b.n	8004ea8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2180      	movs	r1, #128	@ 0x80
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f848 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e03a      	b.n	8004ee2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	3302      	adds	r3, #2
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	e007      	b.n	8004e9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	781a      	ldrb	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	3301      	adds	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1cb      	bne.n	8004e4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2140      	movs	r1, #64	@ 0x40
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f814 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e006      	b.n	8004ee2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e000      	b.n	8004ee2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efa:	e03b      	b.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f02:	d037      	beq.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f04:	f7ff fc44 	bl	8004790 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	6a3a      	ldr	r2, [r7, #32]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d302      	bcc.n	8004f1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e03a      	b.n	8004f94 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d023      	beq.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b80      	cmp	r3, #128	@ 0x80
 8004f30:	d020      	beq.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b40      	cmp	r3, #64	@ 0x40
 8004f36:	d01d      	beq.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d116      	bne.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f81d 	bl	8004f9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2208      	movs	r2, #8
 8004f66:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e00f      	b.n	8004f94 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d0b4      	beq.n	8004efc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b095      	sub	sp, #84	@ 0x54
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fc4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3314      	adds	r3, #20
 8004fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f023 0301 	bic.w	r3, r3, #1
 8004fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3314      	adds	r3, #20
 8004ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ff8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e5      	bne.n	8004fd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005010:	2b01      	cmp	r3, #1
 8005012:	d119      	bne.n	8005048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	60bb      	str	r3, [r7, #8]
   return(result);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f023 0310 	bic.w	r3, r3, #16
 800502a:	647b      	str	r3, [r7, #68]	@ 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	330c      	adds	r3, #12
 8005032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005034:	61ba      	str	r2, [r7, #24]
 8005036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6979      	ldr	r1, [r7, #20]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	613b      	str	r3, [r7, #16]
   return(result);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005056:	bf00      	nop
 8005058:	3754      	adds	r7, #84	@ 0x54
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005068:	b0c0      	sub	sp, #256	@ 0x100
 800506a:	af00      	add	r7, sp, #0
 800506c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	68d9      	ldr	r1, [r3, #12]
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	ea40 0301 	orr.w	r3, r0, r1
 800508c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	431a      	orrs	r2, r3
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050bc:	f021 010c 	bic.w	r1, r1, #12
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050ca:	430b      	orrs	r3, r1
 80050cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050de:	6999      	ldr	r1, [r3, #24]
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	ea40 0301 	orr.w	r3, r0, r1
 80050ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005330 <UART_SetConfig+0x2cc>)
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d005      	beq.n	8005104 <UART_SetConfig+0xa0>
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005334 <UART_SetConfig+0x2d0>)
 8005100:	429a      	cmp	r2, r3
 8005102:	d104      	bne.n	800510e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7ff fe02 	bl	8004d0c <HAL_RCC_GetPCLK2Freq>
 8005108:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800510c:	e003      	b.n	8005116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800510e:	f7ff fde9 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8005112:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005120:	f040 810c 	bne.w	800533c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800512e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005136:	4622      	mov	r2, r4
 8005138:	462b      	mov	r3, r5
 800513a:	1891      	adds	r1, r2, r2
 800513c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800513e:	415b      	adcs	r3, r3
 8005140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005146:	4621      	mov	r1, r4
 8005148:	eb12 0801 	adds.w	r8, r2, r1
 800514c:	4629      	mov	r1, r5
 800514e:	eb43 0901 	adc.w	r9, r3, r1
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800515e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005166:	4690      	mov	r8, r2
 8005168:	4699      	mov	r9, r3
 800516a:	4623      	mov	r3, r4
 800516c:	eb18 0303 	adds.w	r3, r8, r3
 8005170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005174:	462b      	mov	r3, r5
 8005176:	eb49 0303 	adc.w	r3, r9, r3
 800517a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800518a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800518e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005192:	460b      	mov	r3, r1
 8005194:	18db      	adds	r3, r3, r3
 8005196:	653b      	str	r3, [r7, #80]	@ 0x50
 8005198:	4613      	mov	r3, r2
 800519a:	eb42 0303 	adc.w	r3, r2, r3
 800519e:	657b      	str	r3, [r7, #84]	@ 0x54
 80051a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051a8:	f7fb fcc0 	bl	8000b2c <__aeabi_uldivmod>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4b61      	ldr	r3, [pc, #388]	@ (8005338 <UART_SetConfig+0x2d4>)
 80051b2:	fba3 2302 	umull	r2, r3, r3, r2
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	011c      	lsls	r4, r3, #4
 80051ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	1891      	adds	r1, r2, r2
 80051d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051d4:	415b      	adcs	r3, r3
 80051d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051dc:	4641      	mov	r1, r8
 80051de:	eb12 0a01 	adds.w	sl, r2, r1
 80051e2:	4649      	mov	r1, r9
 80051e4:	eb43 0b01 	adc.w	fp, r3, r1
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051fc:	4692      	mov	sl, r2
 80051fe:	469b      	mov	fp, r3
 8005200:	4643      	mov	r3, r8
 8005202:	eb1a 0303 	adds.w	r3, sl, r3
 8005206:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800520a:	464b      	mov	r3, r9
 800520c:	eb4b 0303 	adc.w	r3, fp, r3
 8005210:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005220:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005228:	460b      	mov	r3, r1
 800522a:	18db      	adds	r3, r3, r3
 800522c:	643b      	str	r3, [r7, #64]	@ 0x40
 800522e:	4613      	mov	r3, r2
 8005230:	eb42 0303 	adc.w	r3, r2, r3
 8005234:	647b      	str	r3, [r7, #68]	@ 0x44
 8005236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800523a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800523e:	f7fb fc75 	bl	8000b2c <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4611      	mov	r1, r2
 8005248:	4b3b      	ldr	r3, [pc, #236]	@ (8005338 <UART_SetConfig+0x2d4>)
 800524a:	fba3 2301 	umull	r2, r3, r3, r1
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	2264      	movs	r2, #100	@ 0x64
 8005252:	fb02 f303 	mul.w	r3, r2, r3
 8005256:	1acb      	subs	r3, r1, r3
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800525e:	4b36      	ldr	r3, [pc, #216]	@ (8005338 <UART_SetConfig+0x2d4>)
 8005260:	fba3 2302 	umull	r2, r3, r3, r2
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800526c:	441c      	add	r4, r3
 800526e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005272:	2200      	movs	r2, #0
 8005274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005278:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800527c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	1891      	adds	r1, r2, r2
 8005286:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005288:	415b      	adcs	r3, r3
 800528a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800528c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005290:	4641      	mov	r1, r8
 8005292:	1851      	adds	r1, r2, r1
 8005294:	6339      	str	r1, [r7, #48]	@ 0x30
 8005296:	4649      	mov	r1, r9
 8005298:	414b      	adcs	r3, r1
 800529a:	637b      	str	r3, [r7, #52]	@ 0x34
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052a8:	4659      	mov	r1, fp
 80052aa:	00cb      	lsls	r3, r1, #3
 80052ac:	4651      	mov	r1, sl
 80052ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b2:	4651      	mov	r1, sl
 80052b4:	00ca      	lsls	r2, r1, #3
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	4642      	mov	r2, r8
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052c4:	464b      	mov	r3, r9
 80052c6:	460a      	mov	r2, r1
 80052c8:	eb42 0303 	adc.w	r3, r2, r3
 80052cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80052e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052e4:	460b      	mov	r3, r1
 80052e6:	18db      	adds	r3, r3, r3
 80052e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ea:	4613      	mov	r3, r2
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052fa:	f7fb fc17 	bl	8000b2c <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <UART_SetConfig+0x2d4>)
 8005304:	fba3 1302 	umull	r1, r3, r3, r2
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	2164      	movs	r1, #100	@ 0x64
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	3332      	adds	r3, #50	@ 0x32
 8005316:	4a08      	ldr	r2, [pc, #32]	@ (8005338 <UART_SetConfig+0x2d4>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	f003 0207 	and.w	r2, r3, #7
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4422      	add	r2, r4
 800532a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800532c:	e106      	b.n	800553c <UART_SetConfig+0x4d8>
 800532e:	bf00      	nop
 8005330:	40011000 	.word	0x40011000
 8005334:	40011400 	.word	0x40011400
 8005338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800533c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005340:	2200      	movs	r2, #0
 8005342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005346:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800534a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800534e:	4642      	mov	r2, r8
 8005350:	464b      	mov	r3, r9
 8005352:	1891      	adds	r1, r2, r2
 8005354:	6239      	str	r1, [r7, #32]
 8005356:	415b      	adcs	r3, r3
 8005358:	627b      	str	r3, [r7, #36]	@ 0x24
 800535a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800535e:	4641      	mov	r1, r8
 8005360:	1854      	adds	r4, r2, r1
 8005362:	4649      	mov	r1, r9
 8005364:	eb43 0501 	adc.w	r5, r3, r1
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	00eb      	lsls	r3, r5, #3
 8005372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005376:	00e2      	lsls	r2, r4, #3
 8005378:	4614      	mov	r4, r2
 800537a:	461d      	mov	r5, r3
 800537c:	4643      	mov	r3, r8
 800537e:	18e3      	adds	r3, r4, r3
 8005380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005384:	464b      	mov	r3, r9
 8005386:	eb45 0303 	adc.w	r3, r5, r3
 800538a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800539a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053aa:	4629      	mov	r1, r5
 80053ac:	008b      	lsls	r3, r1, #2
 80053ae:	4621      	mov	r1, r4
 80053b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b4:	4621      	mov	r1, r4
 80053b6:	008a      	lsls	r2, r1, #2
 80053b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053bc:	f7fb fbb6 	bl	8000b2c <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4b60      	ldr	r3, [pc, #384]	@ (8005548 <UART_SetConfig+0x4e4>)
 80053c6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	011c      	lsls	r4, r3, #4
 80053ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	1891      	adds	r1, r2, r2
 80053e6:	61b9      	str	r1, [r7, #24]
 80053e8:	415b      	adcs	r3, r3
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f0:	4641      	mov	r1, r8
 80053f2:	1851      	adds	r1, r2, r1
 80053f4:	6139      	str	r1, [r7, #16]
 80053f6:	4649      	mov	r1, r9
 80053f8:	414b      	adcs	r3, r1
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005408:	4659      	mov	r1, fp
 800540a:	00cb      	lsls	r3, r1, #3
 800540c:	4651      	mov	r1, sl
 800540e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005412:	4651      	mov	r1, sl
 8005414:	00ca      	lsls	r2, r1, #3
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	4603      	mov	r3, r0
 800541c:	4642      	mov	r2, r8
 800541e:	189b      	adds	r3, r3, r2
 8005420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005424:	464b      	mov	r3, r9
 8005426:	460a      	mov	r2, r1
 8005428:	eb42 0303 	adc.w	r3, r2, r3
 800542c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	67bb      	str	r3, [r7, #120]	@ 0x78
 800543a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005448:	4649      	mov	r1, r9
 800544a:	008b      	lsls	r3, r1, #2
 800544c:	4641      	mov	r1, r8
 800544e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005452:	4641      	mov	r1, r8
 8005454:	008a      	lsls	r2, r1, #2
 8005456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800545a:	f7fb fb67 	bl	8000b2c <__aeabi_uldivmod>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4611      	mov	r1, r2
 8005464:	4b38      	ldr	r3, [pc, #224]	@ (8005548 <UART_SetConfig+0x4e4>)
 8005466:	fba3 2301 	umull	r2, r3, r3, r1
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	2264      	movs	r2, #100	@ 0x64
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	1acb      	subs	r3, r1, r3
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	3332      	adds	r3, #50	@ 0x32
 8005478:	4a33      	ldr	r2, [pc, #204]	@ (8005548 <UART_SetConfig+0x4e4>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005484:	441c      	add	r4, r3
 8005486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800548a:	2200      	movs	r2, #0
 800548c:	673b      	str	r3, [r7, #112]	@ 0x70
 800548e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005490:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005494:	4642      	mov	r2, r8
 8005496:	464b      	mov	r3, r9
 8005498:	1891      	adds	r1, r2, r2
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	415b      	adcs	r3, r3
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a4:	4641      	mov	r1, r8
 80054a6:	1851      	adds	r1, r2, r1
 80054a8:	6039      	str	r1, [r7, #0]
 80054aa:	4649      	mov	r1, r9
 80054ac:	414b      	adcs	r3, r1
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054bc:	4659      	mov	r1, fp
 80054be:	00cb      	lsls	r3, r1, #3
 80054c0:	4651      	mov	r1, sl
 80054c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054c6:	4651      	mov	r1, sl
 80054c8:	00ca      	lsls	r2, r1, #3
 80054ca:	4610      	mov	r0, r2
 80054cc:	4619      	mov	r1, r3
 80054ce:	4603      	mov	r3, r0
 80054d0:	4642      	mov	r2, r8
 80054d2:	189b      	adds	r3, r3, r2
 80054d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054d6:	464b      	mov	r3, r9
 80054d8:	460a      	mov	r2, r1
 80054da:	eb42 0303 	adc.w	r3, r2, r3
 80054de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80054ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054f8:	4649      	mov	r1, r9
 80054fa:	008b      	lsls	r3, r1, #2
 80054fc:	4641      	mov	r1, r8
 80054fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005502:	4641      	mov	r1, r8
 8005504:	008a      	lsls	r2, r1, #2
 8005506:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800550a:	f7fb fb0f 	bl	8000b2c <__aeabi_uldivmod>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4b0d      	ldr	r3, [pc, #52]	@ (8005548 <UART_SetConfig+0x4e4>)
 8005514:	fba3 1302 	umull	r1, r3, r3, r2
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	2164      	movs	r1, #100	@ 0x64
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	3332      	adds	r3, #50	@ 0x32
 8005526:	4a08      	ldr	r2, [pc, #32]	@ (8005548 <UART_SetConfig+0x4e4>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	f003 020f 	and.w	r2, r3, #15
 8005532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4422      	add	r2, r4
 800553a:	609a      	str	r2, [r3, #8]
}
 800553c:	bf00      	nop
 800553e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005542:	46bd      	mov	sp, r7
 8005544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005548:	51eb851f 	.word	0x51eb851f

0800554c <__libc_init_array>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	4d0d      	ldr	r5, [pc, #52]	@ (8005584 <__libc_init_array+0x38>)
 8005550:	4c0d      	ldr	r4, [pc, #52]	@ (8005588 <__libc_init_array+0x3c>)
 8005552:	1b64      	subs	r4, r4, r5
 8005554:	10a4      	asrs	r4, r4, #2
 8005556:	2600      	movs	r6, #0
 8005558:	42a6      	cmp	r6, r4
 800555a:	d109      	bne.n	8005570 <__libc_init_array+0x24>
 800555c:	4d0b      	ldr	r5, [pc, #44]	@ (800558c <__libc_init_array+0x40>)
 800555e:	4c0c      	ldr	r4, [pc, #48]	@ (8005590 <__libc_init_array+0x44>)
 8005560:	f000 f894 	bl	800568c <_init>
 8005564:	1b64      	subs	r4, r4, r5
 8005566:	10a4      	asrs	r4, r4, #2
 8005568:	2600      	movs	r6, #0
 800556a:	42a6      	cmp	r6, r4
 800556c:	d105      	bne.n	800557a <__libc_init_array+0x2e>
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	f855 3b04 	ldr.w	r3, [r5], #4
 8005574:	4798      	blx	r3
 8005576:	3601      	adds	r6, #1
 8005578:	e7ee      	b.n	8005558 <__libc_init_array+0xc>
 800557a:	f855 3b04 	ldr.w	r3, [r5], #4
 800557e:	4798      	blx	r3
 8005580:	3601      	adds	r6, #1
 8005582:	e7f2      	b.n	800556a <__libc_init_array+0x1e>
 8005584:	08005cd0 	.word	0x08005cd0
 8005588:	08005cd0 	.word	0x08005cd0
 800558c:	08005cd0 	.word	0x08005cd0
 8005590:	08005cd4 	.word	0x08005cd4

08005594 <modf>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	ec55 4b10 	vmov	r4, r5, d0
 800559a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800559e:	f2a3 32ff 	subw	r2, r3, #1023	@ 0x3ff
 80055a2:	2a13      	cmp	r2, #19
 80055a4:	4606      	mov	r6, r0
 80055a6:	462f      	mov	r7, r5
 80055a8:	dc21      	bgt.n	80055ee <modf+0x5a>
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	da07      	bge.n	80055be <modf+0x2a>
 80055ae:	2200      	movs	r2, #0
 80055b0:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 80055b4:	e9c0 2300 	strd	r2, r3, [r0]
 80055b8:	ec45 4b10 	vmov	d0, r4, r5
 80055bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055be:	481d      	ldr	r0, [pc, #116]	@ (8005634 <modf+0xa0>)
 80055c0:	4110      	asrs	r0, r2
 80055c2:	ea05 0300 	and.w	r3, r5, r0
 80055c6:	4323      	orrs	r3, r4
 80055c8:	d105      	bne.n	80055d6 <modf+0x42>
 80055ca:	e9c6 4500 	strd	r4, r5, [r6]
 80055ce:	f007 4500 	and.w	r5, r7, #2147483648	@ 0x80000000
 80055d2:	461c      	mov	r4, r3
 80055d4:	e7f0      	b.n	80055b8 <modf+0x24>
 80055d6:	2200      	movs	r2, #0
 80055d8:	ea25 0300 	bic.w	r3, r5, r0
 80055dc:	4620      	mov	r0, r4
 80055de:	4629      	mov	r1, r5
 80055e0:	e9c6 2300 	strd	r2, r3, [r6]
 80055e4:	f7fa fe08 	bl	80001f8 <__aeabi_dsub>
 80055e8:	4604      	mov	r4, r0
 80055ea:	460d      	mov	r5, r1
 80055ec:	e7e4      	b.n	80055b8 <modf+0x24>
 80055ee:	2a33      	cmp	r2, #51	@ 0x33
 80055f0:	dd13      	ble.n	800561a <modf+0x86>
 80055f2:	ed86 0b00 	vstr	d0, [r6]
 80055f6:	f000 f81f 	bl	8005638 <__fpclassifyd>
 80055fa:	b950      	cbnz	r0, 8005612 <modf+0x7e>
 80055fc:	4622      	mov	r2, r4
 80055fe:	462b      	mov	r3, r5
 8005600:	4620      	mov	r0, r4
 8005602:	4629      	mov	r1, r5
 8005604:	f7fa fdfa 	bl	80001fc <__adddf3>
 8005608:	4604      	mov	r4, r0
 800560a:	460d      	mov	r5, r1
 800560c:	e9c6 4500 	strd	r4, r5, [r6]
 8005610:	e7d2      	b.n	80055b8 <modf+0x24>
 8005612:	2400      	movs	r4, #0
 8005614:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 8005618:	e7ce      	b.n	80055b8 <modf+0x24>
 800561a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800561e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005622:	40d8      	lsrs	r0, r3
 8005624:	ea14 0300 	ands.w	r3, r4, r0
 8005628:	d0cf      	beq.n	80055ca <modf+0x36>
 800562a:	462b      	mov	r3, r5
 800562c:	ea24 0200 	bic.w	r2, r4, r0
 8005630:	e7d4      	b.n	80055dc <modf+0x48>
 8005632:	bf00      	nop
 8005634:	000fffff 	.word	0x000fffff

08005638 <__fpclassifyd>:
 8005638:	ec51 0b10 	vmov	r0, r1, d0
 800563c:	b510      	push	{r4, lr}
 800563e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8005642:	460b      	mov	r3, r1
 8005644:	d019      	beq.n	800567a <__fpclassifyd+0x42>
 8005646:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800564a:	490e      	ldr	r1, [pc, #56]	@ (8005684 <__fpclassifyd+0x4c>)
 800564c:	428a      	cmp	r2, r1
 800564e:	d90e      	bls.n	800566e <__fpclassifyd+0x36>
 8005650:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8005654:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8005658:	428a      	cmp	r2, r1
 800565a:	d908      	bls.n	800566e <__fpclassifyd+0x36>
 800565c:	4a0a      	ldr	r2, [pc, #40]	@ (8005688 <__fpclassifyd+0x50>)
 800565e:	4213      	tst	r3, r2
 8005660:	d007      	beq.n	8005672 <__fpclassifyd+0x3a>
 8005662:	4294      	cmp	r4, r2
 8005664:	d107      	bne.n	8005676 <__fpclassifyd+0x3e>
 8005666:	fab0 f080 	clz	r0, r0
 800566a:	0940      	lsrs	r0, r0, #5
 800566c:	bd10      	pop	{r4, pc}
 800566e:	2004      	movs	r0, #4
 8005670:	e7fc      	b.n	800566c <__fpclassifyd+0x34>
 8005672:	2003      	movs	r0, #3
 8005674:	e7fa      	b.n	800566c <__fpclassifyd+0x34>
 8005676:	2000      	movs	r0, #0
 8005678:	e7f8      	b.n	800566c <__fpclassifyd+0x34>
 800567a:	2800      	cmp	r0, #0
 800567c:	d1ee      	bne.n	800565c <__fpclassifyd+0x24>
 800567e:	2002      	movs	r0, #2
 8005680:	e7f4      	b.n	800566c <__fpclassifyd+0x34>
 8005682:	bf00      	nop
 8005684:	7fdfffff 	.word	0x7fdfffff
 8005688:	7ff00000 	.word	0x7ff00000

0800568c <_init>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr

08005698 <_fini>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr
